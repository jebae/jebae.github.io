{"componentChunkName":"component---src-containers-post-layout-tsx","path":"/priority-queue","result":{"data":{"markdownRemark":{"html":"<h3>우선 순위 큐</h3>\n<p>우선 순위 큐는 최댓값, 최솟값을 찾는데 효율적인 자료 구조입니다. C++, python 을 포함한 많은 언어들이 내장 라이브러리를 통해 우선 순위 큐를 지원하는 것과 달리 javascript 는 지원하지 않고 있습니다. 그래서 종종 외부 라이브러리를 설치할 수 없는 프로젝트나 알고리즘 테스트에서 우선 순위 큐가 필요할 때, 우선 순위 큐를 직접 구현해야 하는 귀찮음이 따릅니다. 이 포스트에서는 javascript 를 사용해 우선 순위 큐를 구현해 보고 더 나아가 상황에 따라 다른 구현 코드로 시간 복잡도를 낮출 수 있는 방법을 알아보겠습니다.</p>\n<p><br/><br/><br/><br/></p>\n<h3>힙 (heap)</h3>\n<p>우선 순위 큐는 힙 자료구조로 만들어집니다. 힙은 그림과 같이 이진트리를 기본으로 한 자료구조입니다.</p>\n<center>\n<img loading=\"lazy\" src=\"https://www.dropbox.com/s/b7uprwzburggvl3/heap.svg?raw=1\" width=\"100%\"/>\n</center>\n<p>힙은 위에서 아래로 한 계층의 노드가 모두 채워질 때까지, 왼쪽에서 오른쪽으로 노드를 삽입합니다. 위 그림의 노드 왼편에 써 있는 번호는 삽입된 순서를 의미합니다. 제거 시 최하위 레벨의 오른쪽 노드부터 제거합니다. 이런 성질은 힙이 아래와 같이 어느 한쪽 서브 트리의 깊이가 다른 쪽보다 2 이상 큰 형태가 될 수 없도록 만듭니다.</p>\n<center>\n<img loading=\"lazy\" src=\"https://www.dropbox.com/s/usvf8l0yaghq654/no%20heap.svg?raw=1\" width=\"100%\"/>\n</center>\n<p>보통 트리는 노드 객체를 선언하고 노드의 속성 <code class=\"language-text\">.left</code>, <code class=\"language-text\">.right</code> 를 이용해 구현하지만 힙은 위와 같은 성질 덕분에 배열로 구현할 수 있습니다. 아래 힙 트리의 노드를 위에서 아래, 왼쪽에서 오른쪽 방향으로 따라가보면 <code class=\"language-text\">[ 42, 20, 4, 12, 7, 8, 19, 1, 67, 38, 24, 15 ]</code> 와 같이 정리됩니다.</p>\n<center>\n<img loading=\"lazy\" src=\"https://www.dropbox.com/s/b7uprwzburggvl3/heap.svg?raw=1\" width=\"100%\"/>\n</center>\n<p>배열로 정리된 힙에서 자식 노드는 자신의 인덱스에서 1을 뺀 뒤 2로 나누었을 때 부모 노드의 인덱스를 얻습니다. 거꾸로 부모 노드의 인덱스에 2를 곱한 뒤 1을 더하면 왼쪽 자식 노드의 인덱스를, 2를 곱한 뒤 2를 더하면 오른쪽 자식의 인덱스를 얻습니다.</p>\n<center>\n<img loading=\"lazy\" src=\"https://www.dropbox.com/s/3n4z8siss4gbru0/heap_in_array.svg?raw=1\" width=\"100%\"/>\n</center>\n<p>이같은 힙의 편리한 성질은 우선 순위 큐를 구현하는데 중요한 역할을 합니다.</p>\n<p><br/><br/><br/><br/></p>\n<h3>힙을 이용한 우선 순위 큐</h3>\n<p>크기가 n 인 정수 배열이 정렬되지 않은 상태라고 할 때 최솟값을 찾으려면 O(n) 의 시간 복잡도를 필요로 합니다. 만약 k 개의 최솟값을 찾아야 한다면 첫번째 작은 값, 두번째 작은 값, ... k 번째 작은 값을 찾기 위해 O(kn) 으로 배열을 탐색하거나 배열을 정렬해 O(n logn) 으로 탐색할 수도 있습니다.</p>\n<p>최솟값 또는 최댓값을 찾는 또 다른 한가지 효율적인 방법은 힙을 이용한 우선 순위 큐를 활용하는 것입니다. 최솟값을 찾는 우선 순위 큐를 구현한다고 할 때 큐의 첫번째 엔트리는 다른 엔트리들보다 작은 값이어야 합니다. 여기서 큐의 첫번째 엔트리는 힙의 루트 노드에 해당합니다. 조금 더 일반적으로 정의하면, 힙의 부모 노드는 항상 자식 노드보다 작거나 같은 값이어야 합니다. 이 때 루트 노드는 모든 노드의 부모이므로 당연히 가장 작은 값을 가집니다. 아래 그림은 부모 노드의 값이 항상 자식보다 작은 힙 트리를 보여주고 있습니다.</p>\n<center>\n<img loading=\"lazy\" src=\"https://www.dropbox.com/s/0qhf19b3wl15v68/min_heap.svg?raw=1\" width=\"100%\"/>\n</center>\n<p>그림의 힙을 배열로 구현했다고 할 때 최솟값은 배열의 0번째 엔트리입니다.</p>\n<p>우선 순위 큐 역시 여느 큐와 마찬가지로 엔트리를 삽입하는 메소드 <code class=\"language-text\">push</code>, 제거하는 메소드 <code class=\"language-text\">pop</code> 를 가집니다. 메소드 <code class=\"language-text\">push</code> 와 <code class=\"language-text\">pop</code> 은 그 실행 결과로 항상 부모 노드의 값이 자식 노드보다 작거나 같도록 유지해야 합니다.</p>\n<p>먼저 <code class=\"language-text\">push</code> 를 구현해 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// const heap = [ ... ];</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">heappush</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">heap<span class=\"token punctuation\">,</span> elem</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>함수 <code class=\"language-text\">heappush</code> 는 배열로 구현된 힙 <code class=\"language-text\">heap</code> 에 <code class=\"language-text\">elem</code> 를 삽입하고 힙의 부모 노드의 값이 항상 자식 노드의 값보다 작거나 같도록 유지해야 합니다. 힙은 위에서 아래로, 왼쪽부터 오른쪽으로 노드를 삽입하므로 <code class=\"language-text\">heap.push(elem)</code> 을 실행하면 자연스럽게 최하위 레벨의 가장 오른쪽에 노드가 추가됩니다.</p>\n<center>\n<img loading=\"lazy\" src=\"https://www.dropbox.com/s/w0qu9n65s8tlwdi/push_heap_node.svg?raw=1\" width=\"100%\"/>\n</center>\n<p>추가된 노드의 값 2는 부모 노드인 15보다 작으므로 최소힙의 조건을 만족하지 않습니다. 최소힙을 유지하기 위해 <code class=\"language-text\">heappush</code> 는 추가된 노드에 대해 조건을 만족할 때까지 부모 노드와 스왑을 반복합니다. 위 그림의 경우 추가된 노드 2를 부모 노드 15와 스왑해 서브 트리에 대해 조건을 만족시킵니다.</p>\n<center>\n<img loading=\"lazy\" src=\"https://www.dropbox.com/s/vy4dtnlzr8s13pn/swap_with_parent_node.svg?raw=1\" width=\"100%\"/>\n</center>\n<p>이 때 힙의 부모 인덱스는 자식 인덱스에서 1을 뺀 뒤 2로 나눈 값입니다. 예시의 경우 추가된 노드의 인덱스는 12이므로 부모 노드의 인덱스는 (12 - 1) / 2 = 5 입니다. 새로운 노드의 추가부터 부모 노드와 값을 비교 후 스왑하는 과정까지 코드로 작성해 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// const heap = [ ... ];</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">heappush</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">heap<span class=\"token punctuation\">,</span> elem</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\theap<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 추가된 노드의 인덱스</span>\n\t<span class=\"token keyword\">let</span> idx <span class=\"token operator\">=</span> heap<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 부모 노드의 인덱스</span>\n\t<span class=\"token keyword\">const</span> parent <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">trunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>idx <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 자식 노드의 값이 부모 노드보다 작다면 스왑</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> heap<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> temp <span class=\"token operator\">=</span> heap<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t\theap<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> heap<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\theap<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>한편 노드 2는 스왑된 위치에서의 새로운 부모 노드 4보다 값이 작으므로 한 번 더 스왑합니다.</p>\n<center>\n<img loading=\"lazy\" src=\"https://www.dropbox.com/s/n8lb2y74dmc4nri/swap_with_grand_parent_node.svg?raw=1\" width=\"100%\"/>\n</center>\n<p>두번째 스왑된 위치에서 새로운 부모 노드의 값 1은 2보다 작으므로 더 이상 스왑을 진행하지 않습니다. 이 과정을 코드에 적용해 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// const heap = [ ... ];</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">heappush</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">heap<span class=\"token punctuation\">,</span> elem</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\theap<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 추가된 노드의 인덱스</span>\n\t<span class=\"token keyword\">let</span> idx <span class=\"token operator\">=</span> heap<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 노드가 루트에 위치하면 더 이상 부모 노드가 없으므로 반복을 중단</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>idx <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// 부모 노드의 인덱스</span>\n\t\t<span class=\"token keyword\">const</span> parent <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">trunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>idx <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// 자식 노드의 값이 부모 노드보다 작다면 스왑</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> heap<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">const</span> temp <span class=\"token operator\">=</span> heap<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t\t\theap<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> heap<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\theap<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n\t\t\tidx <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">break</span> <span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">heappush</code> 함수는 추가된 노드가 루트 노드가 될 때까지 스왑을 반복한다고 할 때 힙 트리의 계층 개수만큼 비교, 스왑 연산을 시행합니다. 힙 트리의 전체 노드 개수를 n 이라 할 때 힙 트리 계층의 개수는 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">log_2n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span></span></span></span> 입니다. 예를 들어 트리의 노드 개수가 8개라면 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mn>8</mn><mo>=</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">log_28 = 3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span> 이므로 3번 비교, 스왑 연산을 시행합니다. 따라서 <code class=\"language-text\">heappush</code> 함수의 시간 복잡도는 O(log n) 이라 할 수 있습니다.</p>\n<center>\n<img loading=\"lazy\" src=\"https://www.dropbox.com/s/t75h5ht653zease/heap_push_time_complexity.svg?raw=1\" width=\"100%\"/>\n</center>\n<p><br/><br/></p>\n<p>노드 추가 함수에 이어 노드 제거 함수 <code class=\"language-text\">heappop</code> 을 구현해볼 차례입니다. 힙 트리에서 노드 삭제는 최하위 레벨의 가장 오른쪽부터 실행됩니다.</p>\n<center>\n<img loading=\"lazy\" src=\"https://www.dropbox.com/s/0qhf19b3wl15v68/min_heap.svg?raw=1\" width=\"100%\"/>\n</center>\n<p>위 힙 트리에서 최하위 가장 오른쪽 노드의 값은 20입니다. 일반적인 힙 트리라면 20을 제거한 뒤 반환하겠지만 우선 순위 큐의 힙에서 단순히 제거만 실행한다면 최솟값을 찾는 자료 구조로서 전혀 역할하지 못합니다.</p>\n<p>우선 순위 큐의 <code class=\"language-text\">heappop</code> 은 먼저 트리의 가장 작은 값인 루트 노드를 제거한 뒤 그 자리를 힙 트리의 가장 끝 값으로 메꿉니다.</p>\n<center>\n<img loading=\"lazy\" src=\"https://www.dropbox.com/s/iv65jjh8srmh45m/first_step_of_heappop.svg?raw=1\" width=\"100%\"/>\n</center>\n<p>위 동작은 가장 작은 값을 반환값으로 사용할 수 있는 동시에 최하위 레벨의 가장 오른쪽 노드 제거를 가능케 합니다. 이 부분은 아주 간단하게 코드로 작성할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">heappop</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">heap</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 루트 노드 제거</span>\n\t<span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> heap<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 루트 노드 자리를 최하위 가장 오른쪽 노드로 메꿈</span>\n\theap<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token operator\">...</span>\n\n\t<span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>남은 프로세스는 새롭게 바뀐 루트 노드부터 트리의 부모 노드 값이 자식보다 작도록 유지하는 것입니다. 루트 노드가 교체된 아래 그림에서 루트 노드의 두 자식 노드 7과 4는 각각의 자식 노드들보다 항상 작은 값입니다.</p>\n<center>\n<img loading=\"lazy\" src=\"https://www.dropbox.com/s/6efu3gkc63h77ud/after_first_step_of_heappop.svg?raw=1\" width=\"100%\"/>\n</center>\n<p>따라서 두 자식 노드 중 더 작은 값과 루트 노드를 스왑하면 힙 트리는 가장 작은 값을 루트 노드로서 가지게 됩니다.</p>\n<center>\n<img loading=\"lazy\" src=\"https://www.dropbox.com/s/s2tgabalmei9bum/second_step_of_heappop.svg?raw=1\" width=\"100%\"/>\n</center>\n<p>이 부분을 부모와 자식 노드의 인덱스 상관 관계를 이용해 코드로 구현해 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">heappop</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">heap</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 루트 노드 제거</span>\n\t<span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> heap<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 루트 노드 자리를 최하위 가장 오른쪽 노드로 메꿈</span>\n\theap<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 루트 노드와 그 자식 노드들의 인덱스</span>\n\t<span class=\"token keyword\">const</span> idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> left <span class=\"token operator\">=</span> idx <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> right <span class=\"token operator\">=</span> idx <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">let</span> next <span class=\"token operator\">=</span> idx<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 루트 노드와 왼쪽 자식 노드를 비교</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> heap<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\tnext <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 루트 노드와 왼쪽 자식 노드 중 작은 쪽과 오른쪽 자식 노드를 비교</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> heap<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\tnext <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 세 노드 루트와 왼쪽, 오른쪽 자식 중 가장 작은 노드가 루트가 아닐 경우 스왑</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>idx <span class=\"token operator\">!==</span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> temp <span class=\"token operator\">=</span> heap<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t\theap<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> heap<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\theap<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token operator\">...</span>\n\n\t<span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>스왑이 완료된 뒤 노드 20은 새로운 자식 노드 15, 19 중 더 작은 값 15와 한 번 더 스왑합니다.</p>\n<center>\n<img loading=\"lazy\" src=\"https://www.dropbox.com/s/dxi66qlj8i4a4b6/third_step_of_heappop.svg?raw=1\" width=\"100%\"/>\n</center>\n<p>두번째 스왑이 완료된 뒤 노드 20은 자식 노드를 가지고 있지 않으므로 더 이상 진행하지 않습니다. 반복을 적용해 코드를 수정해 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">heappop</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">heap</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 루트 노드 제거</span>\n\t<span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> heap<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 루트 노드를 제거한 상태에서 힙 트리에 노드가 없다면 더 이상 프로세스를 진행하지 않음</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 루트 노드 자리를 최하위 가장 오른쪽 노드로 메꿈</span>\n\theap<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">let</span> idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 더 이상 자식 노드가 없을 때 까지 반복</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>idx <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> heap<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// 부모 노드와 그 자식 노드들의 인덱스</span>\n\t\t<span class=\"token keyword\">let</span> next <span class=\"token operator\">=</span> idx<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> left <span class=\"token operator\">=</span> idx <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> right <span class=\"token operator\">=</span> idx <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// 부모 노드와 왼쪽 자식 노드를 비교</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> heap<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\tnext <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// 부모 노드와 왼쪽 자식 노드 중 작은 쪽과 오른쪽 자식 노드를 비교</span>\n\t\t<span class=\"token comment\">// 이 때 오른쪽 자식 노드가 있는지 확인</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">&lt;</span> heap<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> heap<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> heap<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\tnext <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// 부모 노드가 가장 작은 경우 반복을 중지</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>idx <span class=\"token operator\">===</span> next<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">break</span> <span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// 부모 노드와 가장 작은 자식 노드를 스왑</span>\n\t\t<span class=\"token keyword\">const</span> temp <span class=\"token operator\">=</span> heap<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t\theap<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> heap<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\theap<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n\t\tidx <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">heappop</code> 은 <code class=\"language-text\">heappush</code> 와 마찬가지로 최대한 힙 트리의 계층 개수만큼 스왑하므로 시간 복잡도는 O(log n) 입니다.\n이제 <code class=\"language-text\">heappush</code> 와 <code class=\"language-text\">heappop</code> 함수를 이용해 정렬 없이 최솟값을 찾을 수 있습니다. 최댓값을 찾는 우선 순위 큐는 비교 연산의 부호만 바꾸어 구현할 수 있습니다. 주석을 제거해보면 함수의 길이도 길지 않은 편이라 우선순위 큐가 필요할 때 부담없이 구현해서 사용해 보시기 바랍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">heappush</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">heap<span class=\"token punctuation\">,</span> elem</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\theap<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">let</span> idx <span class=\"token operator\">=</span> heap<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>idx <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> parent <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">trunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>idx <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> heap<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">const</span> temp <span class=\"token operator\">=</span> heap<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t\t\theap<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> heap<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\theap<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n\t\t\tidx <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">break</span> <span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">heappop</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">heap</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> heap<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n\n\theap<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">let</span> idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>idx <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> heap<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">let</span> next <span class=\"token operator\">=</span> idx<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> left <span class=\"token operator\">=</span> idx <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> right <span class=\"token operator\">=</span> idx <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> heap<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\tnext <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">&lt;</span> heap<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> heap<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> heap<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\tnext <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>idx <span class=\"token operator\">===</span> next<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">break</span> <span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">const</span> temp <span class=\"token operator\">=</span> heap<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t\theap<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> heap<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\theap<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n\t\tidx <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><br/><br/><br/><br/></p>\n<h3>기존의 배열을 우선 순위 큐로 바꾸는 방법</h3>\n<p>최솟값을 찾는 어떤 문제는 비교할 데이터가 없는 상태에서 시작해 하나씩 큐에 추가하면서 이전에 추가된 데이터와 비교할 것을 요구합니다. 예를 들어 다익스트라 알고리즘은 다음 노드로의 엣지들을 큐에 추가하고 최소 누적 비용의 경로를 큐에서 삭제합니다. 이 경우 <code class=\"language-text\">heappush</code>, <code class=\"language-text\">heappop</code> 함수를 이용한 우선 순위 큐를 사용하면 다익스트라 알고리즘을 구현할 수 있습니다.</p>\n<center>\n<img loading=\"lazy\" src=\"https://www.dropbox.com/s/98blljdzqxwakxl/Dijkstra_Animation.gif?raw=1\" width=\"50%\"/>\n<span class=\"image-caption\">출처: 위키피디아</span>\n</center>\n<p><br/><br/></p>\n<p>반면 이미 주어져 있는 데이터를 우선 순위 큐 형태로 변환해야 하는 경우도 있습니다. 예를 들어 아래 <code class=\"language-text\">arr</code> 배열을 우선 순위 큐 형태로 바꾼다고 하면, <code class=\"language-text\">heappush</code> 함수를 이용해 새로운 배열 <code class=\"language-text\">pq</code> 에 <code class=\"language-text\">arr</code> 의 값들을 하나씩 삽입하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> pq <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> num <span class=\"token keyword\">of</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">heappush</span><span class=\"token punctuation\">(</span>pq<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 경우 <code class=\"language-text\">arr</code> 의 크기 n 만큼의 반복횟수와 <code class=\"language-text\">heappush</code> 의 시간 복잡도 O(log n) 를 곱해 O(n log n) 으로 우선 순위 큐를 만들어 냅니다. 하지만 이 방법보다 더 빠르고 메모리도 아끼는 방법이 있습니다.</p>\n<p><br/><br/></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">heapify</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">heap<span class=\"token punctuation\">,</span> idx</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>idx <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> heap<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">let</span> next <span class=\"token operator\">=</span> idx<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> left <span class=\"token operator\">=</span> idx <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> right <span class=\"token operator\">=</span> idx <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> heap<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\tnext <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">&lt;</span> heap<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> heap<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> heap<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\tnext <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>idx <span class=\"token operator\">===</span> next<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">break</span> <span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">const</span> temp <span class=\"token operator\">=</span> heap<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t\theap<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> heap<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\theap<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n\t\tidx <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>함수 <code class=\"language-text\">heapify</code> 는 <code class=\"language-text\">heap</code> 의 <code class=\"language-text\">idx</code> 번째 노드를 루트로 갖는 서브 트리가 우선 순위 큐의 조건을 만족시키도록 합니다. 서브 트리의 부모 노드가 두 자식 노드들보다 작을 때 까지 스왑을 반복하는 것입니다. <code class=\"language-text\">heappop</code> 의 주요 로직과 아주 똑같습니다.</p>\n<p>우선 순위 큐의 루트 노드는 노드들 중 가장 작은 값을 가지고 있습니다. 루트 노드의 왼쪽과 오른쪽 두 자식 노드는 각각의 서브 트리에서 가장 작은 값을 가지고 있습니다. 마찬가지로 그 자식의 자식 노드 역시 각각의 서브 트리에서 가장 작은 값을 가지고 있습니다.</p>\n<center>\n<img loading=\"lazy\" src=\"https://www.dropbox.com/s/viqsf6qsevopejd/subtree.svg?raw=1\" width=\"100%\"/>\n</center>\n<p>즉 힙 트리의 가장 작은 서브 트리부터 가장 큰 트리까지 부모 노드가 자식 노드보다 작도록 조건을 만족시켜 나가면 힙 트리는 우선 순위 큐가 됩니다. 가장 작은 서브 트리의 부모 노드는 리프 노드들의 부모 노드입니다. 아래 그림은 리프 노드들의 부모 노드인 3, 4, 5번째 노드들에 <code class=\"language-text\">heapify</code> 를 적용하는 과정을 보여주고 있습니다.</p>\n<center>\n<img loading=\"lazy\" src=\"https://www.dropbox.com/s/p7p4gk7ud3s9eem/heapify_leaf_node.svg?raw=1\" width=\"100%\"/>\n</center>\n<p>이후 루트 노드에 도달할 때 까지 부모 노드들에 대해 <code class=\"language-text\">heapify</code> 를 반복하면 가장 작은 서브 트리부터 전체 트리까지 우선 순위 큐의 조건을 만족시킬 수 있습니다.</p>\n<center>\n<img loading=\"lazy\" src=\"https://www.dropbox.com/s/f192dco2rpwmhe9/heapify_subtree.svg?raw=1\" width=\"100%\"/>\n</center>\n<p>이 과정을 코드로 작성해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">buildHeap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">heap</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> idx <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">trunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> idx <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> idx<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">heapify</span><span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">heapify</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">heap<span class=\"token punctuation\">,</span> idx</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>함수 <code class=\"language-text\">heappush</code> 가 큐에 데이터를 삽입하면서 우선 순위 큐를 만드는 기능이었다면 <code class=\"language-text\">build_heap</code> 은 삽입, 삭제 없이 배열의 요소들을 스왑함으로서 우선 순위 큐의 조건을 만족시킵니다. 새로운 큐 변수 없이 입력값 배열을 변형시키므로 별도의 메모리 공간을 필요로 하지 않습니다.</p>\n<p><br/><br/></p>\n<p>계층 별 노드들에 대해 <code class=\"language-text\">heapify</code> 를 실행하면 아래와 같은 연산 횟수를 보여줍니다.</p>\n<center>\n<img loading=\"lazy\" src=\"https://www.dropbox.com/s/pa62e371akpwofc/heapify_node_count.svg?raw=1\" width=\"100%\"/>\n</center>\n<p>전체 노드의 개수를 n 이라 할 때 각 계층의 노드 개수는 1, 2, 4, ..., n / 2 로 두 배씩 증가합니다. 스왑 연산 횟수는 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">log_2n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span></span></span></span> 에서 하나씩 줄어 0에 도달합니다. 계층 별 연산 횟수를 합하면 다음과 같이 쓸 수 있습니다.</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.24999999999999992em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mn>0</mn><mo>⋅</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo>+</mo><mn>1</mn><mo>⋅</mo><mfrac><mi>n</mi><msup><mn>2</mn><mn>2</mn></msup></mfrac><mo>+</mo><mn>2</mn><mo>⋅</mo><mfrac><mi>n</mi><msup><mn>2</mn><mn>3</mn></msup></mfrac><mo>+</mo><mn>3</mn><mo>⋅</mo><mfrac><mi>n</mi><msup><mn>2</mn><mn>4</mn></msup></mfrac><mo>+</mo><mn>4</mn><mo>⋅</mo><mfrac><mi>n</mi><msup><mn>2</mn><mn>5</mn></msup></mfrac><mo>+</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mfrac><mi>n</mi><mn>4</mn></mfrac><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mfrac><mn>2</mn><mn>2</mn></mfrac><mo>+</mo><mfrac><mn>3</mn><msup><mn>2</mn><mn>2</mn></msup></mfrac><mo>+</mo><mfrac><mn>4</mn><msup><mn>2</mn><mn>3</mn></msup></mfrac><mo>+</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned}\n&amp; 0 \\cdot \\frac{n}{2} + 1 \\cdot \\frac{n}{2^2} + 2 \\cdot \\frac{n}{2^3} + 3 \\cdot \\frac{n}{2^4} + 4 \\cdot \\frac{n}{2^5} + ... \\\\ \\\\\n&amp; = \\frac{n}{4}(1 + \\frac{2}{2} + \\frac{3}{2^2} + \\frac{4}{2^3} + ...)\n\\end{aligned}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:5.901em;vertical-align:-2.700500000000001em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2004999999999995em;\"><span style=\"top:-5.414379999999999em;\"><span class=\"pstrut\" style=\"height:3.32144em;\"></span><span class=\"mord\"></span></span><span style=\"top:-3.58838em;\"><span class=\"pstrut\" style=\"height:3.32144em;\"></span><span class=\"mord\"></span></span><span style=\"top:-1.6069399999999994em;\"><span class=\"pstrut\" style=\"height:3.32144em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.700500000000001em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2004999999999995em;\"><span style=\"top:-5.414379999999999em;\"><span class=\"pstrut\" style=\"height:3.32144em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10756em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10756em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10756em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10756em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10756em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span></span></span><span style=\"top:-1.6069399999999998em;\"><span class=\"pstrut\" style=\"height:3.32144em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10756em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">4</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7005000000000003em;\"><span></span></span></span></span></span></span></span></span></span></span></span>\n<p>괄호 안의 식에서 더해지는 각 항은 분모는 지수 증가, 분자는 선형 증가하는 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mi>k</mi><msup><mn>2</mn><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msup></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{k}{2^{k-1}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2375279999999997em;vertical-align:-0.3574199999999999em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8801079999999999em;\"><span style=\"top:-2.64258em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7820285714285714em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3574199999999999em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> 형태입니다. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> 가 무한히 증가하면 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mfrac><mn>2</mn><mn>2</mn></mfrac><mo>+</mo><mfrac><mn>3</mn><msup><mn>2</mn><mn>2</mn></msup></mfrac><mo>+</mo><mfrac><mn>4</mn><msup><mn>2</mn><mn>3</mn></msup></mfrac><mo>+</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(1 + \\frac{2}{2} + \\frac{3}{2^2} + \\frac{4}{2^3} + ...)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7463142857142857em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7463142857142857em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">4</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mclose\">)</span></span></span></span> 는 극솟값 수렴하므로 상수 치환할 수 있습니다. 합을 상수 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> 라 할 때 연산 횟수는 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mi>n</mi><mn>4</mn></mfrac><mo>⋅</mo><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">\\frac{n}{4} \\cdot c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.040392em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.695392em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">4</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> 입니다. 따라서 시간 복잡도는 O(n) 이라 할 수 있습니다.</p>\n<p>상황에 맞게 <code class=\"language-text\">heappush</code> 대신 <code class=\"language-text\">build_heap</code> 을 이용하면 메모리도 절약하고 시간 복잡도도 낮출 수 있습니다.</p>\n<p><br/><br/><br/><br/></p>\n<h3>출처 및 참고</h3>\n<ul>\n<li><a href=\"https://ratsgo.github.io/data%20structure&#x26;algorithm/2017/09/27/heapsort/\">ratsgo.github.io</a></li>\n</ul>","frontmatter":{"date":"2021년 05월 20일","slug":"/priority-queue","title":"우선 순위 큐와 힙","tags":["힙","최대힙","최소힙","우선 순위 큐","javascript"],"category":["자료구조"],"description":"javascript 를 이용한 우선 순위 큐 구현과 시간 복잡도 계산"}}},"pageContext":{"slug":"/priority-queue","categories":[{"category":"선형대수학","count":26,"href":"/category/선형대수학"},{"category":"그래픽스","count":14,"href":"/category/그래픽스"},{"category":"병렬 프로그래밍","count":3,"href":"/category/병렬 프로그래밍"},{"category":"최적화 문제","count":3,"href":"/category/최적화 문제"},{"category":"알고리즘","count":2,"href":"/category/알고리즘"},{"category":"미적분","count":2,"href":"/category/미적분"},{"category":"테크니컬 라이팅","count":1,"href":"/category/테크니컬 라이팅"},{"category":"자료구조","count":1,"href":"/category/자료구조"},{"category":"운영체제","count":1,"href":"/category/운영체제"}],"tags":[{"tag":"코딩 더 매트릭스","count":24,"href":"/tag/코딩 더 매트릭스"},{"tag":"python","count":24,"href":"/tag/python"},{"tag":"레이 트레이싱","count":7,"href":"/tag/레이 트레이싱"},{"tag":"알고리즘","count":4,"href":"/tag/알고리즘"},{"tag":"OpenCL","count":3,"href":"/tag/OpenCL"},{"tag":"C","count":3,"href":"/tag/C"},{"tag":"회전","count":3,"href":"/tag/회전"},{"tag":"행렬","count":2,"href":"/tag/행렬"},{"tag":"그래픽스","count":2,"href":"/tag/그래픽스"},{"tag":"벡터","count":2,"href":"/tag/벡터"},{"tag":"라그랑주 승수법","count":2,"href":"/tag/라그랑주 승수법"},{"tag":"테크니컬 라이팅","count":1,"href":"/tag/테크니컬 라이팅"},{"tag":"힙","count":1,"href":"/tag/힙"},{"tag":"최대힙","count":1,"href":"/tag/최대힙"},{"tag":"최소힙","count":1,"href":"/tag/최소힙"},{"tag":"우선 순위 큐","count":1,"href":"/tag/우선 순위 큐"},{"tag":"javascript","count":1,"href":"/tag/javascript"},{"tag":"메모리 단편화","count":1,"href":"/tag/메모리 단편화"},{"tag":"동적 메모리","count":1,"href":"/tag/동적 메모리"},{"tag":"기저","count":1,"href":"/tag/기저"},{"tag":"정렬","count":1,"href":"/tag/정렬"},{"tag":"연결 리스트","count":1,"href":"/tag/연결 리스트"},{"tag":"문자열 탐색","count":1,"href":"/tag/문자열 탐색"},{"tag":"복소수","count":1,"href":"/tag/복소수"},{"tag":"사원수","count":1,"href":"/tag/사원수"},{"tag":"쿼터니언","count":1,"href":"/tag/쿼터니언"},{"tag":"선형대수학","count":1,"href":"/tag/선형대수학"},{"tag":"Gradient 벡터","count":1,"href":"/tag/Gradient 벡터"},{"tag":"편미분","count":1,"href":"/tag/편미분"},{"tag":"전미분","count":1,"href":"/tag/전미분"},{"tag":"확률분포","count":1,"href":"/tag/확률분포"}]}}}