{"componentChunkName":"component---src-containers-post-layout-tsx","path":"/merge-sort","result":{"data":{"markdownRemark":{"html":"<h3>병합 정렬 (Merge sort)</h3>\n<p>정렬 알고리즘 중 병합 정렬(Merge sort)은 분할 정복으로 리스트를 정렬합니다. 아래는 병합 정렬의 프로세스를 잘 보여주는 그림입니다.</p>\n<center>\n<img loading=\"lazy\" src=\"https://www.dropbox.com/s/s83dptgx8b0paf1/Merge-sort-example-300px.gif?raw=1\" width=\"50%\"/>\n</center>\n<p><br><br></p>\n<p>이 글에서는 연결 리스트에 대해 병합 정렬을 적용해 보겠습니다.</p>\n<p><br/><br/><br/><br/></p>\n<h3>연결 리스트의 병합 정렬</h3>\n<p>다음과 같이 연결 리스트 구조체를 선언하고 노드를 만드는 함수와 새롭게 만들어진 노드를 리스트에 추가하는 함수를 작성해 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span>\t\t<span class=\"token class-name\">s_list</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">void</span>\t\t\t<span class=\"token operator\">*</span>content<span class=\"token punctuation\">;</span>\n\tsize_t\t\t\tcontent_size<span class=\"token punctuation\">;</span> <span class=\"token comment\">// size_t 자료형은 string.h, stdlib.h 등에 선언되어 있습니다.</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">s_list</span>\t<span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\t\t\t\t\tt_list<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 새로운 노드를 만드는 함수</span>\nt_list\t\t<span class=\"token operator\">*</span><span class=\"token function\">lstnew</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>content<span class=\"token punctuation\">,</span> size_t content_size<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tt_list\t<span class=\"token operator\">*</span>list<span class=\"token punctuation\">;</span>\n\n\tlist <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>t_list <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>t_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>list <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>content <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tlist<span class=\"token operator\">-></span>content <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\tlist<span class=\"token operator\">-></span>content_size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tlist<span class=\"token operator\">-></span>content <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>content_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>list<span class=\"token operator\">-></span>content <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>list<span class=\"token operator\">-></span>content<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">,</span> content_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tlist<span class=\"token operator\">-></span>content_size <span class=\"token operator\">=</span> content_size<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\tlist<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 새로운 노드를 리스트의 가장 앞에 추가하는 함수</span>\n<span class=\"token keyword\">void</span>\t<span class=\"token function\">lstadd</span><span class=\"token punctuation\">(</span>t_list <span class=\"token operator\">*</span><span class=\"token operator\">*</span>alst<span class=\"token punctuation\">,</span> t_list <span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>alst <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n\tn<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>alst<span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">*</span>alst <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><br/><br/>\n연결 리스트에 대한 병합 정렬 알고리즘의 순서는 다음과 같습니다.</p>\n<blockquote>\n<p><code class=\"language-text\">MergeSort(head)</code></p>\n<ol>\n<li>만약 <code class=\"language-text\">head</code> 가 <code class=\"language-text\">NULL</code> 이거나 <code class=\"language-text\">head-&gt;next</code> 가 <code class=\"language-text\">NULL</code> 이면, 즉 리스트의 길이가 0 또는 1이면 아무 것도 반환하지 않습니다.</li>\n<li>아니라면 리스트를 절반으로 나눕니다. (함수 <code class=\"language-text\">split</code>)</li>\n<li>나눠진 리스트를 재귀적으로 분할 정렬합니다.\n<code class=\"language-text\">MergeSort(a)</code>\n<code class=\"language-text\">MergeSort(b)</code></li>\n<li>분할 정렬된 리스트들을 병합합니다. 이 때 이미 정렬되어 있는 두 리스트에 대해 순차적으로 비교 연산해 병합합니다. (함수 <code class=\"language-text\">sorted_merge</code>)</li>\n</ol>\n</blockquote>\n<p><br/><br/>\n먼저 리스트를 절반으로 나누는 함수 <code class=\"language-text\">split</code> 을 작성해 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span>\t\t\t<span class=\"token function\">split</span><span class=\"token punctuation\">(</span>t_list <span class=\"token operator\">*</span>head<span class=\"token punctuation\">,</span> t_list <span class=\"token operator\">*</span><span class=\"token operator\">*</span>front<span class=\"token punctuation\">,</span> t_list <span class=\"token operator\">*</span><span class=\"token operator\">*</span>back<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tt_list\t<span class=\"token operator\">*</span>fast<span class=\"token punctuation\">;</span>\n\tt_list\t<span class=\"token operator\">*</span>slow<span class=\"token punctuation\">;</span>\n\n\tslow <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n\tfast <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>fast <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tfast <span class=\"token operator\">=</span> fast<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fast <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\tfast <span class=\"token operator\">=</span> fast<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t\t\tslow <span class=\"token operator\">=</span> slow<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token operator\">*</span>front <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">*</span>back <span class=\"token operator\">=</span> slow<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\tslow<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>변수 <code class=\"language-text\">slow</code> 가 한번 전진할 때 <code class=\"language-text\">fast</code> 는 두 번 전진해 리스트의 중간을 찾습니다. 이 후 매개변수 <code class=\"language-text\">front</code> 에 두 개로 나뉠 리스트 중 앞의 리스트의 첫번째 노드를, <code class=\"language-text\">back</code> 에 뒤의 리스트의 첫번째 노드를 저장하게 됩니다. 마지막 줄의 <code class=\"language-text\">slow-&gt;next = NULL</code> 는 앞의 리스트의 끝을 알리기 위함입니다.</p>\n<p><br/><br/>\n다음으로 두 개로 나뉜 리스트를 병합하는 함수 <code class=\"language-text\">sorted_merge</code> 입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">t_list\t\t<span class=\"token operator\">*</span><span class=\"token function\">sorted_merge</span><span class=\"token punctuation\">(</span>t_list <span class=\"token operator\">*</span>front<span class=\"token punctuation\">,</span> t_list <span class=\"token operator\">*</span>back<span class=\"token punctuation\">,</span>\\\n\t\t<span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>t_list <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> t_list <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tt_list\t<span class=\"token operator\">*</span>res<span class=\"token punctuation\">;</span>\n\n\tres <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>front <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>back<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>back <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>front<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>front<span class=\"token punctuation\">,</span> back<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tres <span class=\"token operator\">=</span> back<span class=\"token punctuation\">;</span>\n\t\tres<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token function\">sorted_merge</span><span class=\"token punctuation\">(</span>front<span class=\"token punctuation\">,</span> back<span class=\"token operator\">-></span>next<span class=\"token punctuation\">,</span> compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tres <span class=\"token operator\">=</span> front<span class=\"token punctuation\">;</span>\n\t\tres<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token function\">sorted_merge</span><span class=\"token punctuation\">(</span>front<span class=\"token operator\">-></span>next<span class=\"token punctuation\">,</span> back<span class=\"token punctuation\">,</span> compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>만약 두 개의 리스트 <code class=\"language-text\">front</code> 와 <code class=\"language-text\">back</code> 에 각각 <code class=\"language-text\">[1, 3]</code>, <code class=\"language-text\">[2, 4]</code> 가 저장되어 있다면 <code class=\"language-text\">sorted_merge</code> 함수는 아래와 같이 병합 정렬합니다.</p>\n<ol>\n<li>두 리스트의 가장 앞선 값 <strong>1</strong>과 <strong>2</strong>를 비교해 1을 가진 노드를 <code class=\"language-text\">res</code> 에 저장합니다. 이후 다음 올 노드는 <code class=\"language-text\">[3]</code> 과 <code class=\"language-text\">[2, 4]</code> 에 대해 재귀적으로 정렬합니다.</li>\n<li>두 리스트의 가장 앞선 값 <strong>3</strong>과 <strong>2</strong>를 비교해 2를 가진 노드를 <code class=\"language-text\">res</code> 에 저장합니다. 이 때 변수 <code class=\"language-text\">res</code> 는 함수를 호출한 이전 재귀함수의 변수 <code class=\"language-text\">res-&gt;next</code> 에 저장됩니다. 이후 다음 올 노드는 <code class=\"language-text\">[3]</code> 과 <code class=\"language-text\">[4]</code> 에 대해 재귀적으로 정렬합니다.</li>\n<li>두 리스트의 가장 앞선 값 <strong>3</strong>과 <strong>4</strong>를 비교해 3을 가진 노드를 <code class=\"language-text\">res</code> 에 저장합니다. 이 때 변수 <code class=\"language-text\">res</code> 는 함수를 호출한 이전 재귀함수의 변수 <code class=\"language-text\">res-&gt;next</code> 에 저장됩니다. 이후 다음 올 노드는 <code class=\"language-text\">[]</code> 과 <code class=\"language-text\">[4]</code> 에 대해 재귀적으로 정렬합니다.</li>\n<li><code class=\"language-text\">front</code> 는 값이 없는 리스트이므로 4를 가진 노드를 반환합니다. 이 때 반환된 노드는 함수를 호출한 이전 재귀함수의 변수 <code class=\"language-text\">res-&gt;next</code> 에 저장됩니다.</li>\n</ol>\n<p><br/><br/>\n마지막으로 분할과 병합을 재귀적으로 호출할 함수 <code class=\"language-text\">merge_sort</code> 입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span>\t\t\t<span class=\"token function\">merge_sort</span><span class=\"token punctuation\">(</span>t_list <span class=\"token operator\">*</span><span class=\"token operator\">*</span>head<span class=\"token punctuation\">,</span>\\\n\t\t<span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>t_list <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> t_list <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tt_list\t<span class=\"token operator\">*</span>front<span class=\"token punctuation\">;</span>\n\tt_list\t<span class=\"token operator\">*</span>back<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>head <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>head<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>next <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>head<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>front<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>back<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">merge_sort</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>front<span class=\"token punctuation\">,</span> compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">merge_sort</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>back<span class=\"token punctuation\">,</span> compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">*</span>head <span class=\"token operator\">=</span> <span class=\"token function\">sorted_merge</span><span class=\"token punctuation\">(</span>front<span class=\"token punctuation\">,</span> back<span class=\"token punctuation\">,</span> compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>앞서 작성한 두 함수 <code class=\"language-text\">split</code> 과 <code class=\"language-text\">sorted_merge</code> 를 완벽히 이해했다면 재귀함수 <code class=\"language-text\">merge_sort</code> 를 이해하는데 크게 어려움은 없을 것입니다. 함수 <code class=\"language-text\">merge_sort</code> 는 리스트의 길이가 0 또는 1이 될 때까지 분할을 계속하고 나눠진 리스트에 대해 병합 정렬합니다.</p>\n<p>아래 메인 함수로 직접 테스트해 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span>\t\t<span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>t_list <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> t_list <span class=\"token operator\">*</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">-></span>content<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">-></span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span>\t\t<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span>\t\tarr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\tt_list\t<span class=\"token operator\">*</span>list<span class=\"token punctuation\">;</span>\n\tt_list\t<span class=\"token operator\">*</span>cur<span class=\"token punctuation\">;</span>\n\n\tlist <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">lstadd</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>list<span class=\"token punctuation\">,</span> <span class=\"token function\">lstnew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcur <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">merge_sort</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>list<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcur <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n* 출력 결과\n* 5 1 2 4 3\n* 1 2 3 4 5\n*/</span></code></pre></div>\n<p><br/><br/><br/><br/></p>\n<h3>출처</h3>\n<ul>\n<li><a href=\"https://www.geeksforgeeks.org/merge-sort-for-linked-list/\">www.geeksforgeeks.org</a></li>\n</ul>","frontmatter":{"date":"2019년 05월 18일","slug":"/merge-sort","title":"병합 정렬 (Merge sort)","tags":["정렬","연결 리스트","C"],"category":["알고리즘"],"description":"정렬 + divide and conquer"}}},"pageContext":{"slug":"/merge-sort","categories":[{"category":"선형대수학","count":26,"href":"/category/선형대수학"},{"category":"그래픽스","count":14,"href":"/category/그래픽스"},{"category":"병렬 프로그래밍","count":3,"href":"/category/병렬 프로그래밍"},{"category":"최적화 문제","count":3,"href":"/category/최적화 문제"},{"category":"알고리즘","count":2,"href":"/category/알고리즘"},{"category":"미적분","count":2,"href":"/category/미적분"},{"category":"운영체제","count":1,"href":"/category/운영체제"}],"tags":[{"tag":"코딩 더 매트릭스","count":24,"href":"/tag/코딩 더 매트릭스"},{"tag":"python","count":24,"href":"/tag/python"},{"tag":"레이 트레이싱","count":7,"href":"/tag/레이 트레이싱"},{"tag":"알고리즘","count":4,"href":"/tag/알고리즘"},{"tag":"OpenCL","count":3,"href":"/tag/OpenCL"},{"tag":"C","count":3,"href":"/tag/C"},{"tag":"회전","count":3,"href":"/tag/회전"},{"tag":"행렬","count":2,"href":"/tag/행렬"},{"tag":"그래픽스","count":2,"href":"/tag/그래픽스"},{"tag":"벡터","count":2,"href":"/tag/벡터"},{"tag":"라그랑주 승수법","count":2,"href":"/tag/라그랑주 승수법"},{"tag":"메모리 단편화","count":1,"href":"/tag/메모리 단편화"},{"tag":"동적 메모리","count":1,"href":"/tag/동적 메모리"},{"tag":"기저","count":1,"href":"/tag/기저"},{"tag":"정렬","count":1,"href":"/tag/정렬"},{"tag":"연결 리스트","count":1,"href":"/tag/연결 리스트"},{"tag":"문자열 탐색","count":1,"href":"/tag/문자열 탐색"},{"tag":"복소수","count":1,"href":"/tag/복소수"},{"tag":"사원수","count":1,"href":"/tag/사원수"},{"tag":"쿼터니언","count":1,"href":"/tag/쿼터니언"},{"tag":"선형대수학","count":1,"href":"/tag/선형대수학"},{"tag":"Gradient 벡터","count":1,"href":"/tag/Gradient 벡터"},{"tag":"편미분","count":1,"href":"/tag/편미분"},{"tag":"전미분","count":1,"href":"/tag/전미분"},{"tag":"확률분포","count":1,"href":"/tag/확률분포"}]}}}