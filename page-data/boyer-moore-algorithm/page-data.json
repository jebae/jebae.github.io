{"componentChunkName":"component---src-containers-post-layout-tsx","path":"/boyer-moore-algorithm","result":{"data":{"markdownRemark":{"html":"<h3>보이어 무어 알고리즘</h3>\n<p>보다 빠르게 텍스트 안에서 주어진 패턴의 문자열을 찾는 데는 많은 연구가 이루어져 왔습니다. 가장 직관적으로는 반복문 2개를 이용해 텍스트의 인덱스 하나하나마다 패턴과 일치하는지 찾는 방법이 있습니다. 이 경우 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(mn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> 의 큰 복잡도를 가집니다. 따라서 실제 문자열 패턴을 찾기 위해서는 KMP, 보이어 무어 등 보다 효율적인 알고리즘을 이용합니다. 이 포스트에서는 그 중 보이어 무어 알고리즘을 알아보고 직접 C 코드로 작성해보겠습니다.</p>\n<p><br/><br/></p>\n<p>보이어 무어 알고리즘은 텍스트에 대해 패턴의 오른쪽부터 일치여부를 탐색합니다. 아래 그림은 오른쪽부터 탐색한다는 것이 어떤 의미인지를 보여주고 있습니다.</p>\n<center>\n<img src=\"https://www.dropbox.com/s/507693nihxapuo7/from_right.jpg?raw=1\" width=\"50%\"/>\n</center>\n<p>불일치 지점으로부터 패턴을 얼마나 이동시킬지가 알고리즘의 효율을 결정짓습니다. 보이어 무어 알고리즘은 다음 두 방법을 통해 이동거리를 정합니다. <em>heuristics</em> 은 영어로 발견법을 의미합니다.</p>\n<ul>\n<li>Bad character heuristics</li>\n<li>Good suffix heuristics</li>\n</ul>\n<p><br/><br/><br/><br/></p>\n<h3>Bad character heuristics</h3>\n<p>Bad character heuristics 는 각 character에 대해 character 가 패턴에 포함되어 있다면 포함된 위치 중 가장 오른쪽 인덱스를 저장해서 이동에 사용하는 방법입니다. 예를 들면 패턴 <strong>cabab</strong> 는 다음과 같이 저장할 수 있습니다.</p>\n<table>\n<thead>\n<tr>\n<th>a</th>\n<th>b</th>\n<th>c</th>\n<th>d</th>\n<th>...</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>3</td>\n<td>4</td>\n<td>0</td>\n<td>-1</td>\n<td>-1</td>\n</tr>\n</tbody>\n</table>\n<p>위 테이블에서 알파벳 a, b, c 는 각각의 패턴 속 가장 오른쪽 인덱스와 매칭되고 있습니다. 그리고 패턴에서 발견할 수 없는 character 는 모두 -1 로 저장합니다. 이는 이동거리를 계산하는데 이용됩니다. 위 테이블을 이용해 패턴의 이동을 직접 살펴보겠습니다.</p>\n<center>\n<img src=\"https://www.dropbox.com/s/x1vft1g30bgiua0/bad_character.jpg?raw=1\" width=\"50%\"/>\n</center>\n<p>위 그림에서 패턴의 이동거리는 2입니다. 이는 불일치 지점의 인덱스 4 에서 오른쪽으로부터 처음으로 b가 나오는 인덱스 2 를 뺀 값입니다. 만약 패턴에 텍스트의 character 가 없다면 해당 인덱스로 부터 -1 를 뺌으로서 패턴 전체를 불일치 지점 다음 위치로 이동시킵니다. 1바이트 character 하나 하나의 일치 여부를 판단해 이동하므로 유니코드에 대해서도 똑같이 적용됩니다.</p>\n<p>텍스트의 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>, 패턴의 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span> 번째 인덱스에서 불일치가 발생했을 때 텍스트의 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> 번째 character 가 패턴의 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span> 보다 큰 지점, 즉 패턴의 오른쪽에 위치한다면 패턴이 뒤로 후퇴하는 일이 발생합니다. 아래 그림은 후퇴하는 상황을 보여주고 있습니다. 이동거리는 불일치 지점의 인덱스 2 에서 b 의 가장 오른쪽 인덱스 4 를 뺀 -2 입니다.</p>\n<center>\n<img src=\"https://www.dropbox.com/s/9v17x4fxikmdf17/bad_character_retreat.jpg?raw=1\" width=\"50%\"/>\n</center>\n<p>위와 같은 이유로 보이어 무어 알고리즘은 Bad character heuristics 와 Good suffix heuristics 를 혼합해서 사용합니다.</p>\n<p><br/><br/><br/><br/></p>\n<h3>Good suffix heuristics</h3>\n<p>Good suffix heuristics 은 대칭이 있는 위치를 기억해두고 이동거리를 결정합니다. 이 때 다음 두가지 상황을 고려합니다.</p>\n<ul>\n<li>완벽하게 같은 대칭이 있는 위치로 이동</li>\n<li>부분적으로 같은 대칭이 있는 위치로 이동</li>\n</ul>\n<p>패턴 내의 대칭에 대해 간단히 살펴 보겠습니다. 문자열 <strong>bab</strong> 는 인덱스 0과 2가 대칭입니다. 문자열 <strong>abcab</strong> 는 인덱스 0~1 과 3~4 가 대칭입니다. 문자열 <strong>babab</strong> 는 인덱스 0~2 와 2~4 가 대칭입니다. 문자열 <strong>cbabab</strong> 는 인덱스 1~3 와 3~5 가 대칭입니다.</p>\n<p>아래 그림은 완벽하게 같은 대칭이 있는 위치까지 이동하는 경우를 보여주고 있습니다.</p>\n<center>\n<img src=\"https://www.dropbox.com/s/ue6ccb80p2d1vxr/good_suffix_1.jpg?raw=1\" width=\"50%\"/>\n</center>\n<p>만약 알고리즘이 Bad character heuristics 만 사용했다면 위와 같은 이동을 바랄 수 없었습니다. 만약 같은 대칭이 없는 경우 다음과 같이 패턴의 길이만큼 이동합니다.</p>\n<center>\n<img src=\"https://www.dropbox.com/s/qly26etkfy73p2m/good_suffix_2.jpg?raw=1\" width=\"50%\"/>\n</center>\n<p>이번에는 부분적으로만 같은 대칭이 있는 경우를 생각해보겠습니다. </p>\n<center>\n<img src=\"https://www.dropbox.com/s/dedunu1pjhdnzml/good_suffix_3.jpg?raw=1\" width=\"50%\"/>\n</center>\n<p>만약 불일치 지점 이후의 문자열 <strong>bab</strong> 의 대칭이 없어 패턴의 길이만큼 이동한다면 알고리즘이 실패했을 것입니다.</p>\n<p><br/><br/><br/><br/></p>\n<h3>C 코드</h3>\n<p>이제 Bad character heuristics 와 Good suffix heuristics 를 위해 패턴에 대한 전처리 과정을 코드로 작성해보겠습니다. 먼저 Bad character heuristics 입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">make_bc_table</span><span class=\"token punctuation\">(</span>size_t <span class=\"token operator\">*</span>table<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pat<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tsize_t i<span class=\"token punctuation\">;</span>\n\n\ti <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> CHARACTER_TABLE_SIZE<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token comment\">// 원래는 -1 이 할당되어야 하나 size_t 타입을 맞추기 위해 len 으로 설정</span>\n\t\ttable<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> len<span class=\"token punctuation\">;</span>\n\ti <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\ttable<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n\t\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Bad character heuristics 에 대한 전처리 과정은 간단합니다. 우선 테이블의 모든 요소에 대해 값을 <code class=\"language-text\">len</code> 으로 초기화합니다. 이 때 테이블의 사이즈를 결정하는 매크로 <code class=\"language-text\">CHARACTER_TABLE_SIZE</code> 는 1 바이트에서 담을 수 있는 수의 개수인 256 입니다. 초기화를 마친 뒤 패턴 <code class=\"language-text\">pat</code> 의 각 character 의 인덱스를 테이블에 저장합니다. 이 때 패턴의 왼쪽부터 반복문이 시작되므로 가장 오른쪽 character 의 인덱스가 최종적으로 저장됩니다. 한편 초기화 시에 -1 을 저장해야 맞으나 <code class=\"language-text\">table</code> 어레이의 특성상 패턴의 인덱스의 최대값인 <strong>패턴의 길이 - 1</strong> 만큼의 8바이트 <code class=\"language-text\">size_t</code> 타입을 저장하게 되므로 <code class=\"language-text\">size_t</code> 에서 다룰 수 없는 -1 대신 패턴의 인덱스를 넘어서는 특수한 수 <code class=\"language-text\">len</code> 을 저장하였습니다.</p>\n<p><br/><br/>\nGood suffix heuristics 의 전처리 과정은 코드로 작성했을 때 다소 직관적이지 않으므로 직접 코드를 따라가보며 변수에 할당되는 값들을 적어보는게 좋습니다. 변수 <code class=\"language-text\">pos_table</code> 은 대칭 문자열이 시작되는 인덱스를 저장합니다. 변수 <code class=\"language-text\">shift_table</code> 은 실제 탐색과정에서 쓰게 될 이동거리를 저장합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">make_gs_table</span><span class=\"token punctuation\">(</span>size_t <span class=\"token operator\">*</span>shift_table<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pat<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tsize_t\t\tpos_table<span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tsize_t\t\ti<span class=\"token punctuation\">;</span>\n\tsize_t\t\tj<span class=\"token punctuation\">;</span>\n\n\ti <span class=\"token operator\">=</span> len<span class=\"token punctuation\">;</span>\n\tj <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\tpos_table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;=</span> len <span class=\"token operator\">&amp;&amp;</span> pat<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> pat<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shift_table<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t\tshift_table<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span>\n\t\t\tj <span class=\"token operator\">=</span> pos_table<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tpos_table<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">--</span>j<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tj <span class=\"token operator\">=</span> pos_table<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> len<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shift_table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\tshift_table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">++</span> <span class=\"token operator\">==</span> j<span class=\"token punctuation\">)</span>\n\t\t\tj <span class=\"token operator\">=</span> pos_table<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드의 첫번째 반복문은 완벽하게 같은 대칭에 대한 전처리 과정입니다. 패턴 <strong>cabab</strong> 에 대해 첫번째 반복문을 마친 뒤 다음과 같은 결과를 얻습니다.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>c</th>\n<th>a</th>\n<th>b</th>\n<th>a</th>\n<th>b</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>index</td>\n<td>0</td>\n<td>1</td>\n<td>2</td>\n<td>3</td>\n<td>4</td>\n</tr>\n<tr>\n<td>pos_table</td>\n<td>5</td>\n<td>3</td>\n<td>5</td>\n<td>5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>shift_table</td>\n<td></td>\n<td></td>\n<td></td>\n<td>2</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>인덱스 3의 문자 a 에 대응하는 <code class=\"language-text\">shift_table</code> 의 값 2가 패턴 내 대칭까지의 이동거리를 말해줍니다. 두번째 반복문 이후엔 다음 값들을 얻습니다.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>c</th>\n<th>a</th>\n<th>b</th>\n<th>a</th>\n<th>b</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>index</td>\n<td>0</td>\n<td>1</td>\n<td>2</td>\n<td>3</td>\n<td>4</td>\n</tr>\n<tr>\n<td>pos_table</td>\n<td>5</td>\n<td>3</td>\n<td>5</td>\n<td>5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>shift_table</td>\n<td>5</td>\n<td>5</td>\n<td>5</td>\n<td>2</td>\n<td>5</td>\n</tr>\n</tbody>\n</table>\n<p><code class=\"language-text\">shift_table</code> 의 값은 이전의 character 가 불일치 지점일 때 이동해야할 거리를 알려줍니다. 예를 들어 인덱스 2의 문자 b 가 텍스트와 불일치 했다면 2만큼 패턴을 이동시킵니다.</p>\n<p>아래는 패턴 <strong>abcab</strong> 에 대한 결과 입니다.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>a</th>\n<th>b</th>\n<th>c</th>\n<th>a</th>\n<th>b</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>index</td>\n<td>0</td>\n<td>1</td>\n<td>2</td>\n<td>3</td>\n<td>4</td>\n</tr>\n<tr>\n<td>pos_table</td>\n<td>3</td>\n<td>4</td>\n<td>5</td>\n<td>5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>shift_table</td>\n<td>3</td>\n<td>3</td>\n<td>3</td>\n<td>3</td>\n<td>5</td>\n</tr>\n</tbody>\n</table>\n<p>위의 예시는 특히 인덱스 1 지점에서 불일치 했을 때 3만큼 이동함으로서 부분적으로 같은 대칭이 있는 지점의 정보를 이용합니다.</p>\n<p><br/><br/><br/><br/></p>\n<h3>두 개의 heuristics 를 이용한 탐색</h3>\n<p>보이어 무어 알고리즘에 대한 두 개의 탐색법을 모두 살펴보았습니다. 아래 코드는 텍스트와 패턴이 불일치했을 때 두 방법이 제시하는 이동거리 중 더 큰 값을 선택함을 보여줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>text<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pat<span class=\"token punctuation\">,</span>\\\n\t\tsize_t <span class=\"token operator\">*</span>bc_table<span class=\"token punctuation\">,</span> size_t <span class=\"token operator\">*</span>shift_table<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tsize_t\t\ti<span class=\"token punctuation\">;</span>\n\tsize_t\t\tj<span class=\"token punctuation\">;</span>\n\tsize_t\t\ttext_len<span class=\"token punctuation\">;</span>\n\tsize_t\t\tpat_len<span class=\"token punctuation\">;</span>\n\n\ttext_len <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tpat_len <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>pat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ti <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>text_len <span class=\"token operator\">&lt;</span> pat_len<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> text_len <span class=\"token operator\">-</span> pat_len<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tj <span class=\"token operator\">=</span> pat_len<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> pat<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> text<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\tj<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>text <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bc_table<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> pat_len<span class=\"token punctuation\">)</span>\n\t\t\ti <span class=\"token operator\">+=</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>shift_table<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\\\n\t\t\t\t\tj <span class=\"token operator\">-</span> bc_table<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t\ti <span class=\"token operator\">+=</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>shift_table<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><br/><br/>\n전체 코드는 아래와 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">CHARACTER_TABLE_SIZE <span class=\"token number\">256</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span></span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">make_bc_table</span><span class=\"token punctuation\">(</span>size_t <span class=\"token operator\">*</span>table<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pat<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tsize_t\t\ti<span class=\"token punctuation\">;</span>\n\n\ti <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> CHARACTER_TABLE_SIZE<span class=\"token punctuation\">)</span>\n\t\ttable<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> len<span class=\"token punctuation\">;</span>\n\ti <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\ttable<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n\t\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">make_gs_table</span><span class=\"token punctuation\">(</span>size_t <span class=\"token operator\">*</span>shift_table<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pat<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tsize_t\t\tpos_table<span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tsize_t\t\ti<span class=\"token punctuation\">;</span>\n\tsize_t\t\tj<span class=\"token punctuation\">;</span>\n\n\ti <span class=\"token operator\">=</span> len<span class=\"token punctuation\">;</span>\n\tj <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\tpos_table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;=</span> len <span class=\"token operator\">&amp;&amp;</span> pat<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> pat<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shift_table<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t\tshift_table<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span>\n\t\t\tj <span class=\"token operator\">=</span> pos_table<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tpos_table<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">--</span>j<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tj <span class=\"token operator\">=</span> pos_table<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> len<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shift_table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\tshift_table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">++</span> <span class=\"token operator\">==</span> j<span class=\"token punctuation\">)</span>\n\t\t\tj <span class=\"token operator\">=</span> pos_table<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">preprocess</span><span class=\"token punctuation\">(</span>size_t <span class=\"token operator\">*</span>bc_table<span class=\"token punctuation\">,</span> size_t <span class=\"token operator\">*</span>shift_table<span class=\"token punctuation\">,</span>\\\n\t\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pat<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">make_bc_table</span><span class=\"token punctuation\">(</span>bc_table<span class=\"token punctuation\">,</span> pat<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">make_gs_table</span><span class=\"token punctuation\">(</span>shift_table<span class=\"token punctuation\">,</span> pat<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>text<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pat<span class=\"token punctuation\">,</span>\\\n\t\tsize_t <span class=\"token operator\">*</span>bc_table<span class=\"token punctuation\">,</span> size_t <span class=\"token operator\">*</span>shift_table<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tsize_t\t\ti<span class=\"token punctuation\">;</span>\n\tsize_t\t\tj<span class=\"token punctuation\">;</span>\n\tsize_t\t\ttext_len<span class=\"token punctuation\">;</span>\n\tsize_t\t\tpat_len<span class=\"token punctuation\">;</span>\n\n\ttext_len <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tpat_len <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>pat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ti <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>text_len <span class=\"token operator\">&lt;</span> pat_len<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> text_len <span class=\"token operator\">-</span> pat_len<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tj <span class=\"token operator\">=</span> pat_len<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> pat<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> text<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\tj<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>text <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bc_table<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> pat_len<span class=\"token punctuation\">)</span>\n\t\t\ti <span class=\"token operator\">+=</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>shift_table<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\\\n\t\t\t\t\tj <span class=\"token operator\">-</span> bc_table<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t\ti <span class=\"token operator\">+=</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>shift_table<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">boyer_moore</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>text<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pat<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tsize_t\t\tpat_len<span class=\"token punctuation\">;</span>\n\tsize_t\t\tbc_table<span class=\"token punctuation\">[</span>CHARACTER_TABLE_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tsize_t\t\t<span class=\"token operator\">*</span>shift_table<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span>\t\t<span class=\"token operator\">*</span>loc<span class=\"token punctuation\">;</span>\n\n\tloc <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tpat_len <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>pat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tshift_table <span class=\"token operator\">=</span> <span class=\"token function\">memalloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>pat_len <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shift_table <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">preprocess</span><span class=\"token punctuation\">(</span>bc_table<span class=\"token punctuation\">,</span> shift_table<span class=\"token punctuation\">,</span> pat<span class=\"token punctuation\">,</span> pat_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tloc <span class=\"token operator\">=</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">,</span> pat<span class=\"token punctuation\">,</span> bc_table<span class=\"token punctuation\">,</span> shift_table<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>shift_table<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>loc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><br/><br/><br/><br/></p>\n<h3>출처 및 참고</h3>\n<ul>\n<li><a href=\"http://www.inf.fh-flensburg.de/lang/algorithmen/pattern/bmen.htm\">www.inf.fh-flensburg.de</a></li>\n<li><a href=\"https://www.geeksforgeeks.org/boyer-moore-algorithm-good-suffix-heuristic/\">www.geeksforgeeks.org</a></li>\n</ul>","frontmatter":{"date":"2019년 04월 14일","slug":"/boyer-moore-algorithm","title":"보이어 무어 알고리즘 (Boyer Moore algorithm)","tags":["알고리즘","문자열 탐색","C"],"category":["알고리즘"],"description":"전처리 과정을 통해 효율을 높이는 문자열 탐색 알고리즘"}}},"pageContext":{"slug":"/boyer-moore-algorithm","categories":[{"category":"선형대수학","count":26,"href":"/category/선형대수학"},{"category":"그래픽스","count":7,"href":"/category/그래픽스"},{"category":"병렬 프로그래밍","count":3,"href":"/category/병렬 프로그래밍"},{"category":"최적화 문제","count":3,"href":"/category/최적화 문제"},{"category":"알고리즘","count":2,"href":"/category/알고리즘"},{"category":"미적분","count":2,"href":"/category/미적분"}],"tags":[{"tag":"코딩 더 매트릭스","count":24,"href":"/tag/코딩 더 매트릭스"},{"tag":"python","count":24,"href":"/tag/python"},{"tag":"알고리즘","count":4,"href":"/tag/알고리즘"},{"tag":"OpenCL","count":3,"href":"/tag/OpenCL"},{"tag":"C","count":3,"href":"/tag/C"},{"tag":"회전","count":3,"href":"/tag/회전"},{"tag":"행렬","count":2,"href":"/tag/행렬"},{"tag":"그래픽스","count":2,"href":"/tag/그래픽스"},{"tag":"벡터","count":2,"href":"/tag/벡터"},{"tag":"라그랑주 승수법","count":2,"href":"/tag/라그랑주 승수법"},{"tag":"기저","count":1,"href":"/tag/기저"},{"tag":"정렬","count":1,"href":"/tag/정렬"},{"tag":"연결 리스트","count":1,"href":"/tag/연결 리스트"},{"tag":"문자열 탐색","count":1,"href":"/tag/문자열 탐색"},{"tag":"복소수","count":1,"href":"/tag/복소수"},{"tag":"사원수","count":1,"href":"/tag/사원수"},{"tag":"쿼터니언","count":1,"href":"/tag/쿼터니언"},{"tag":"선형대수학","count":1,"href":"/tag/선형대수학"},{"tag":"Gradient 벡터","count":1,"href":"/tag/Gradient 벡터"},{"tag":"편미분","count":1,"href":"/tag/편미분"},{"tag":"전미분","count":1,"href":"/tag/전미분"},{"tag":"확률분포","count":1,"href":"/tag/확률분포"}]}}}