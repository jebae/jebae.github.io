{"componentChunkName":"component---src-containers-post-layout-tsx","path":"/ray-tracing-principle","result":{"data":{"markdownRemark":{"html":"<h3>레이 트레이싱</h3>\n<p>물체의 색은 반사된 빛이 우리 눈에 비친 결과물입니다. 반사된 빛은 곧바로 우리 눈에 들어오기도 하고 다른 물체에 굴절되거나 다시 반사된 뒤 들어오기도 합니다. 이런 빛의 속성을 이용해, 보다 실제와 가깝게 그려내는 컴퓨터 그래픽스 기법이 레이 트레이싱입니다.</p>\n<br/>\n<p>레이 트레이싱은 카메라에 상이 맺히기까지의 빛의 경로를 추적합니다. 카메라로 전구가 켜져 있는 방안을 찍을 때, 전구로부터 나오는 무수히 많은 광선들 중 일부만이 카메라 상에 맺힙니다. 무수히 많은 광선들을 추적하는 것은 불가능하므로 레이 트레이싱에서는 카메라 상에 맺힌 일부 광선만을 추적합니다.</p>\n<center>\n<img loading=\"lazy\" src=\"https://www.dropbox.com/s/0r65ijp0pf1teti/Ray_trace_diagram.svg?raw=1\" width=\"60%\"/>\n</center>\n<p>카메라에 상이 맺히기 까지의 과정을 시간순으로 정리하면 아래와 같습니다.</p>\n<center>\n<img loading=\"lazy\" src=\"https://www.dropbox.com/s/s3m22jxf97fl1pf/ray_tracing_procedure_1.png?raw=1\" width=\"60%\"/>\n</center>\n<ol>\n<li>광원으로부터 빛 입자의 분출</li>\n<li>물체에 부딪힌 빛의 확산</li>\n<li>확산된 빛 입자가 카메라 렌즈를 거쳐 상에 맺힘</li>\n</ol>\n<p>빛을 추적한다는 것은 빛이 지나온 길을 <strong>되돌아</strong> 간다는 뜻입니다. 위의 과정을 거꾸로 따라가 보면 다음과 같습니다.</p>\n<center>\n<img loading=\"lazy\" src=\"https://www.dropbox.com/s/b9fk5pqz33o7vpd/ray_tracing_procedure_2.png?raw=1\" width=\"60%\"/>\n</center>\n<ol>\n<li>카메라 상에 맺힌 빛 입자가 카메라 렌즈를 거쳐 카메라 바디 밖으로 역행</li>\n<li>물체에 부딪힌 빛이 확산되기 이전의 상태로 돌아감</li>\n<li>빛이 광원으로 돌아감</li>\n</ol>\n<p>빛의 추적을 어떻게 따라가야 할지 대략적인 큰 그림을 보았습니다. 과정을 조금 더 세분화 해보겠습니다.</p>\n<center>\n<img loading=\"lazy\" src=\"https://www.dropbox.com/s/1o1tbo8l6urc6vp/ray_tracing_principle_detail.png?raw=1\" width=\"100%\"/>\n</center>\n<ol>\n<li>카메라 원점으로부터 이미지 상 픽셀을 향하는 광선이 있다고 가정</li>\n<li>공간상의 모든 물체에 대해 광선이 가장 가까이에서 부딪힌 물체를 판정.\n만약 부딪힌 물체가 없다면 이후 과정을 생략</li>\n<li>부딪힌 지점에 대해 물체의 색을 계산</li>\n<li>부딪힌 지점에서 빛의 반사를 추적해 색을 계산</li>\n<li>부딪힌 지점에서 빛의 굴절을 추적해 색을 계산</li>\n</ol>\n<p>빛의 추적을 의사 코드까지 확장해 보겠습니다. 위 그림의 첫번째 과정처럼 광선 역추적은 이미지의 각각의 픽셀에 대해 시행됩니다. 픽셀마다 광선 객체 <code class=\"language-text\">ray</code> 를 생성하고 함수 <code class=\"language-text\">ray_trace</code> 가 <code class=\"language-text\">ray</code> 와 물체, 광원을 이용해 색을 구합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">render_ray_tracing_image</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">for</span> y <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\tray <span class=\"token operator\">=</span> <span class=\"token comment\"># x, y 를 이용한 광선 객체</span>\n\t\t\tgrid<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ray_trace<span class=\"token punctuation\">(</span>ray<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">ray_trace</span><span class=\"token punctuation\">(</span>ray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tobj <span class=\"token operator\">=</span> <span class=\"token comment\"># 부딪힌 물체들 중 가장 가까운 물체</span>\n\t<span class=\"token keyword\">if</span> obj <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> background_color\n\tcolor <span class=\"token operator\">=</span> <span class=\"token comment\"># 부딪힌 물체의 색</span>\n\treflect_ray <span class=\"token operator\">=</span> <span class=\"token comment\"># 부딪힌 지점에서 반사된 광선</span>\n\trefract_ray <span class=\"token operator\">=</span> <span class=\"token comment\"># 부딪힌 지점에서 굴절된 광선</span>\n\tcolor <span class=\"token operator\">+=</span> ray_trace<span class=\"token punctuation\">(</span>reflect_ray<span class=\"token punctuation\">)</span>\n\tcolor <span class=\"token operator\">+=</span> ray_trace<span class=\"token punctuation\">(</span>refract_ray<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> color</code></pre></div>\n<p>앞으로 이어지는 글들은 크게 <strong>물체와 광선의 부딪힘 판단</strong>, <strong>phong reflection 쉐이딩</strong>, <strong>그림자</strong>, <strong>반사와 굴절</strong>, <strong>텍스쳐 매핑</strong>을 이해하고 해결하는데 집중합니다. 그래픽스 영역은 기본적으로 기하학과 선형대수학을 필요로 합니다. 하지만 앞으로 살펴볼 내용들은 레이 트레이싱의 기본 원리에 집중하므로 고등학교 수준의 기하와 벡터만 알고 있다면 무리없이 이해하실 수 있습니다.</p>","frontmatter":{"date":"2020년 11월 25일","slug":"/ray-tracing-principle","title":"레이 트레이싱 (1)","tags":["레이 트레이싱"],"category":["그래픽스"],"description":"레이 트레이싱의 원리"}}},"pageContext":{"slug":"/ray-tracing-principle","categories":[{"category":"선형대수학","count":26,"href":"/category/선형대수학"},{"category":"그래픽스","count":15,"href":"/category/그래픽스"},{"category":"병렬 프로그래밍","count":3,"href":"/category/병렬 프로그래밍"},{"category":"최적화 문제","count":3,"href":"/category/최적화 문제"},{"category":"알고리즘","count":2,"href":"/category/알고리즘"},{"category":"미적분","count":2,"href":"/category/미적분"},{"category":"자료구조","count":1,"href":"/category/자료구조"},{"category":"운영체제","count":1,"href":"/category/운영체제"}],"tags":[{"tag":"코딩 더 매트릭스","count":24,"href":"/tag/코딩 더 매트릭스"},{"tag":"python","count":24,"href":"/tag/python"},{"tag":"레이 트레이싱","count":7,"href":"/tag/레이 트레이싱"},{"tag":"회전","count":4,"href":"/tag/회전"},{"tag":"알고리즘","count":4,"href":"/tag/알고리즘"},{"tag":"OpenCL","count":3,"href":"/tag/OpenCL"},{"tag":"C","count":3,"href":"/tag/C"},{"tag":"행렬","count":2,"href":"/tag/행렬"},{"tag":"그래픽스","count":2,"href":"/tag/그래픽스"},{"tag":"벡터","count":2,"href":"/tag/벡터"},{"tag":"라그랑주 승수법","count":2,"href":"/tag/라그랑주 승수법"},{"tag":"짐벌락","count":1,"href":"/tag/짐벌락"},{"tag":"힙","count":1,"href":"/tag/힙"},{"tag":"최대힙","count":1,"href":"/tag/최대힙"},{"tag":"최소힙","count":1,"href":"/tag/최소힙"},{"tag":"우선 순위 큐","count":1,"href":"/tag/우선 순위 큐"},{"tag":"javascript","count":1,"href":"/tag/javascript"},{"tag":"메모리 단편화","count":1,"href":"/tag/메모리 단편화"},{"tag":"동적 메모리","count":1,"href":"/tag/동적 메모리"},{"tag":"기저","count":1,"href":"/tag/기저"},{"tag":"정렬","count":1,"href":"/tag/정렬"},{"tag":"연결 리스트","count":1,"href":"/tag/연결 리스트"},{"tag":"문자열 탐색","count":1,"href":"/tag/문자열 탐색"},{"tag":"복소수","count":1,"href":"/tag/복소수"},{"tag":"사원수","count":1,"href":"/tag/사원수"},{"tag":"쿼터니언","count":1,"href":"/tag/쿼터니언"},{"tag":"선형대수학","count":1,"href":"/tag/선형대수학"},{"tag":"Gradient 벡터","count":1,"href":"/tag/Gradient 벡터"},{"tag":"편미분","count":1,"href":"/tag/편미분"},{"tag":"전미분","count":1,"href":"/tag/전미분"},{"tag":"확률분포","count":1,"href":"/tag/확률분포"}]}}}