{"componentChunkName":"component---src-containers-post-layout-tsx","path":"/buddy-block","result":{"data":{"markdownRemark":{"html":"<h3>메모리 외부 단편화</h3>\n<p>메모리는 운영체제가 관리하는 컴퓨터의 중요한 자원입니다. 프로세스는 운영체제로부터 필요한 만큼의 메모리를 할당받고 실행이 끝나면 운영체제에게 반납합니다. 대다수의 운영체제는 여러 프로세스를 동시에 실행하는 멀티태스킹을 지원합니다. 프로세스들은 각자에게 필요한 메모리를 운영체제로부터 할당받고 해제하기를 반복합니다. 만약 여러 프로세스가 메모리를 차례대로 할당하게 되면 메모리의 상태는 아래와 같을 것입니다.</p>\n<center>\n<img loading=\"lazy\" src=\"https://www.dropbox.com/s/tjyqt59e458jp0n/memory_occupied_by_process.png?raw=1\" width=\"80%\">\n</center>\n<p>메모리는 여러 프로세스들을 위해 분리되어 있지도 않고 프로세스를 위해 아메바처럼 복제를 만들지도 않습니다. 메모리 주소는 연속적이고 프로세스는 각자의 메모리 시작주소로부터 원하는 크기만큼의 메모리를 할당받습니다. 위 그림의 A, B, C, D 프로세스 중 B, D 프로세스가 메모리를 해제한 상황을 가정해 보겠습니다.</p>\n<center>\n<img loading=\"lazy\" src=\"https://www.dropbox.com/s/0wbm0b0yd73aq60/external_fragmentation.png?raw=1\" width=\"80%\">\n</center>\n<p>이제 새로운 프로세스 E 가 64 바이트의 메모리를 요구한다고 할 때 실제 사용 가능한 메모리는 64바이트 이상이지만 메모리가 연속적으로 존재하지 않아 프로세스 E 는 메모리를 할당 받을 수 없습니다. 이와 같은 현상을 메모리 외부 단편화라고 합니다. 메모리 외부 단편화는 메모리 여유가 있음에도 다른 프로세스를 실행시키지 못하니 이를 해결할 방법이 필요합니다.</p>\n<br/>\n<blockquote>\n<p>💡 참고로 메모리 내부 단편화는 프로세스가 사용 중인 메모리 중 사용하지 않는 메모리 공간을 갖는 경우입니다. 예를 들어 128바이트의 메모리를 할당받은 프로세스가 실제 사용하는 메모리는 100바이트라면 28바이트의 메모리가 낭비됩니다. 이 경우 메모리 내부 단편화에 해당합니다.</p>\n</blockquote>\n<p><br/><br/><br/><br/></p>\n<h3>버디 블록 알고리즘</h3>\n<p>외부 단편화를 해결할 하나의 방법은 <strong>버디 블록</strong> 또는 <strong>버디 메모리 할당</strong>이라 불리는 알고리즘입니다. 버디 블록 알고리즘은 전체 메모리를 여러 <strong>계층</strong>의 <strong>블록</strong>으로 쪼개는 것부터 시작합니다.</p>\n<center>\n<img loading=\"lazy\" src=\"https://www.dropbox.com/s/p98ozm50ld42tsy/hierarchy_of_block.png?raw=1\" width=\"80%\">\n</center>\n<p>블록의 크기가 그 윗 계층 블록 크기의 절반인 <del>굉장히 아름다운</del> 형태를 이루고 있습니다. 이제 프로세스가 메모리 할당을 요청하면 프로세스가 요구하는 메모리 크기보다 큰 적당한 크기의 블록을 프로세스에 할당해 줍니다. 예를 들어 30바이트의 메모리를 요구하는 프로세스에게는 32바이트의 메모리 블록을, 100바이트의 메모리를 요구하는 프로세스에게는 128바이트의 블록을 할당해줍니다. 이렇게 여러 프로세스에게 블록을 할당해 주다 보면 다음과 같은 상태가 될 것입니다.</p>\n<center>\n<img loading=\"lazy\" src=\"https://www.dropbox.com/s/c8xhbx6k8aw75y4/possible_block.png?raw=1\" width=\"80%\">\n</center>\n<p>주의할 점은 각 레벨이 모두 <strong>같은 메모리 공간</strong>을 지칭한다는 것입니다. 단지 레벨 0은 공간을 8개의 블록으로 나누었고 레벨 1은 4개의 블록으로 나누었을 뿐입니다. 만약 아래 그림과 같이 레벨 1의 1번째 블록을 할당하면 블록의 범위를 포함하는 상하위 레벨 블록들은 사용할 수 없습니다.</p>\n<center>\n<img loading=\"lazy\" src=\"https://www.dropbox.com/s/tv0ib9m0g5kx0pc/possible_block_only.png?raw=1\" width=\"80%\">\n</center>\n<p>모든 프로세스가 블록 형태로 메모리를 가져다 쓰고 제자리에 갖다 놓기만 하면 외부 단편화를 해결할 수 있습니다. 물론 약간의(또는 클 수도 있지만) 내부 단편화를 감수해야 하지만 외부 단편화로 인한 문제에 비하면 감수할만한 수준입니다.</p>\n<p><br/><br/><br/><br/></p>\n<h3>메모리 할당</h3>\n<p>이제 버디 블록을 구현해볼 차례입니다. 알고리즘은 크게 메모리를 할당하는 부분과 해제하는 부분으로 나뉩니다. 프로세스는 <code class=\"language-text\">void *malloc(size_t size)</code>, <code class=\"language-text\">void free(void *ptr)</code> 함수를 이용해 동적 메모리를 할당, 해제합니다. <code class=\"language-text\">malloc</code> 은 메모리의 크기만을 매개변수로 받고 결과값으로 메모리의 주소를 반환합니다. 굉장히 제한된 정보만으로 적당한 크기의 블록과 그 주소를 알아내려 하니 조금 막막합니다. 어떻게 하면 구현할 수 있을지 다음 물음들을 살펴보겠습니다.</p>\n<ol>\n<li>요구한 메모리 크기에 적당한 크기의 블록은 무엇일까</li>\n<li>그 블록은 버디 블록 계층에서 어느 레벨에 있는 블록일까</li>\n<li>그 블록은 속해 있는 레벨에서 몇 번째 블록일까</li>\n<li>만약 해당 레벨에 할당 가능한 블록이 없다면 어떻게 해야 할까</li>\n</ol>\n<p>첫번째 물음 <em>\"요구한 메모리 크기에 적당한 크기의 블록은 무엇일까\"</em> 의 적당한 크기란 요구한 메모리 크기보다는 크지만 내부 단편화는 최소화하는 크기를 의미합니다. 버디 블록 계층에서 가장 작은 블록의 크기를 알고 있다고 할 때 그 크기는 다음과 같이 구할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">smallestBlockSize <span class=\"token operator\">=</span> <span class=\"token number\">32</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">getBlockSize</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  blockSize <span class=\"token operator\">=</span> smallestBlockSize\n\n  <span class=\"token keyword\">while</span> size <span class=\"token operator\">></span> blockSize<span class=\"token punctuation\">:</span>\n    blockSize <span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n  <span class=\"token keyword\">return</span> blockSize</code></pre></div>\n<p>두번째 물음 <em>\"그 블록은 버디 블록 계층에서 어느 레벨에 있는 블록일까\"</em> 는 위 코드를 조금만 변형하면 구할 수 있습니다. 최소 크기 블록의 레벨이 0임을 이용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">smallestBlockSize <span class=\"token operator\">=</span> <span class=\"token number\">32</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">getBlockLevel</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  level <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  blockSize <span class=\"token operator\">=</span> smallestBlockSize\n\n  <span class=\"token keyword\">while</span> size <span class=\"token operator\">></span> blockSize<span class=\"token punctuation\">:</span>\n    blockSize <span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    level <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n  <span class=\"token keyword\">return</span> level</code></pre></div>\n<p>첫번째와 두번째 물음을 해결하면서 요구한 <code class=\"language-text\">size</code> 에 맞는 블록의 레벨을 구했습니다. 세번째 물음 <em>\"그 블록은 속해 있는 레벨에서 몇 번째 블록일까\"</em> 을 해결하기 위해 버디 블록 알고리즘은 각 블록의 상태를 관리할 메타 데이터를 이용합니다. 사실 여기서 관리할 상태란 블록을 사용할 수 있는지 없는지 여부만을 저장할 플래그 하나입니다. 아래 그림을 살펴보겠습니다.</p>\n<center>\n<img loading=\"lazy\" src=\"https://www.dropbox.com/s/c8xhbx6k8aw75y4/possible_block.png?raw=1\" width=\"80%\">\n</center>\n<p>각 블록마다 사용 가능 여부 true 또는 false 을 저장할 1바이트의 데이터를 할당해도 무리는 없지만 메모리를 더 아껴 쓰기 위해 각 블록의 상태를 1비트로 저장하겠습니다. 예를 들어 레벨 0 블록들의 개수는 8이므로 1바이트의 상태 관리용 비트맵을 아래와 같이 사용합니다.</p>\n<center>\n<img loading=\"lazy\" src=\"https://www.dropbox.com/s/fd7lr1pcnai8799/bitmap.png?raw=1\" width=\"100%\">\n</center>\n<p>만약 16개의 블록이 있다면 2바이트의 비트맵을, 100개의 블록이 있다면 100 / 8 = 12.5 를 올림한 13바이트의 비트맵을 사용합니다. 일반화하면 어떤 레벨의 블록의 개수가 n 일 때 <code class=\"language-text\">ceil(n / 8)</code>(소수점 첫번째 자리에서 올림) 바이트 크기의 비트맵이 상태 관리용으로 쓰이게 됩니다. 식에 의하면 블록 개수가 8 미만인 레벨에 대해서도 1바이트의 비트맵을 할당하므로 어떤 개수던지 <code class=\"language-text\">ceil(n / 8)</code> 을 이용해 충분한 비트맵을 할당할 수 있습니다. 아래는 <code class=\"language-text\">blockCount</code> 개의 블록을 가진 한 레벨의 비트맵을 할당하는 코드입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token builtin\">bytes</span> <span class=\"token operator\">=</span> blockCount <span class=\"token operator\">//</span> <span class=\"token number\">8</span>\n\n<span class=\"token keyword\">if</span> blockCount <span class=\"token operator\">%</span> <span class=\"token number\">8</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n  <span class=\"token builtin\">bytes</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\nbitmap <span class=\"token operator\">=</span> <span class=\"token builtin\">bytearray</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>상위 레벨의 블록 개수는 바로 아래 레벨 블록 개수의 절반이므로 최하위 레벨의 블록개수를 초기값으로 아래 코드와 같이 전체 레벨에 대해 비트맵을 할당할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">smallestBlockCount <span class=\"token operator\">=</span> <span class=\"token comment\"># 가장 작은 블록의 개수</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">createBitmaps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  bitmaps <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  blockCount <span class=\"token operator\">=</span> smallestBlockCount\n\n  <span class=\"token keyword\">while</span> blockCount <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">bytes</span> <span class=\"token operator\">=</span> blockCount <span class=\"token operator\">//</span> <span class=\"token number\">8</span>\n    <span class=\"token keyword\">if</span> blockCount <span class=\"token operator\">%</span> <span class=\"token number\">8</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n      <span class=\"token builtin\">bytes</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    bitmap <span class=\"token operator\">=</span> <span class=\"token builtin\">bytearray</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># e.g. bytearray[3] = [0, 0, 0]</span>\n\n    bitmaps<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>bitmap<span class=\"token punctuation\">)</span>\n    blockCount <span class=\"token operator\">//=</span> <span class=\"token number\">2</span>\n\n  <span class=\"token keyword\">return</span> bitmaps</code></pre></div>\n<p><code class=\"language-text\">createBitmaps</code> 함수로 만들어진 비트맵 배열은 각 레벨을 인덱스로 해당 레벨의 비트맵을 읽을 수 있습니다. 예를 들어 <code class=\"language-text\">bitmaps[0]</code> 는 레벨 0의 비트맵이고 레벨 0의 0번째 블록의 상태는 <code class=\"language-text\">bitmaps[0][0 // 8] &amp; (1 &lt;&lt; (0 % 8))</code>, 19번째 블록의 상태는 <code class=\"language-text\">bitmaps[0][19 // 8] &amp; (1 &lt;&lt; (19 % 8))</code> 와 같이 읽을 수 있습니다. 매번 인덱스에 대해 나눗셈과 나머지 연산을 하면 코드 가독성에 좋지 않으므로 하나의 함수로 작성하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">getBlockStat</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  bitmap <span class=\"token operator\">=</span> bitmaps<span class=\"token punctuation\">[</span>level<span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span> <span class=\"token keyword\">if</span> bitmap<span class=\"token punctuation\">[</span>idx <span class=\"token operator\">//</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>idx <span class=\"token operator\">%</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> <span class=\"token number\">1</span></code></pre></div>\n<p>비트맵을 이용해 세번째 물음 \"<em>그 블록은 속해 있는 레벨에서 몇 번째 블록일까</em>\" 를 해결했습니다.</p>\n<p>블록의 상태는 1일 때 사용 가능, 0일 때 사용 불가능하다고 하면 위에서 작성한 함수 <code class=\"language-text\">createBitmaps</code> 는 모든 비트를 0으로 초기화하므로 비트맵은 만들었지만 사용할 수 있는 블록이 한 개도 없는 상태입니다. 네번째 물음 \"<em>만약 해당 레벨에 할당 가능한 블록이 없다면 어떻게 해야 할까</em>\" 역시 이 문제의 답을 요구하고 있습니다.</p>\n<p>모든 블록을 사용 가능으로 표시하기 위해 비트맵의 값을 0xFF 로 초기화해야 할까요? 0xFF 로 초기화한다면 비트맵 상태가 가리키는 모습은 아래와 같습니다.</p>\n<center>\n<img loading=\"lazy\" src=\"https://www.dropbox.com/s/kj2a3p7fquz5f5l/full_available.png?raw=1\" width=\"100%\">\n</center>\n<p>레벨 1의 1번째 블록을 사용한다고 하면 <code class=\"language-text\">bitmaps[1][0] &amp;= ~(1 &lt;&lt; 1)</code> 과 같이 비트를 0으로 만들어주고 블록을 할당하면 됩니다. 그리고 각 레벨은 사실 같은 메모리 공간을 가리키고 있으므로 레벨 1의 1번째 블록을 범위로 포함하는 상하위 레벨의 블록들 역시 대응하는 비트맵의 상태를 0으로 바꿔 주어야 합니다.</p>\n<center>\n<img loading=\"lazy\" src=\"https://www.dropbox.com/s/svdgq33xsts73or/set_bit_zero_upper_down.png?raw=1\" width=\"100%\">\n</center>\n<p>매번 할당할 때마다 상하위 레벨 블록들의 상태까지 신경 써 줘야 하는게 복잡하게 보입니다. 버디 블록은 이같이 복잡하고 비효율적인 방법 대신 짝이 없는 <strong>잉여 블록</strong>을 사용 가능한 상태로 초기화합니다. 그리고 원하는 레벨의 블록을 찾기 위해 상위 레벨의 블록을 쪼개는 방법을 이용합니다. 예를 들어 아래와 같이 초기화된 블록 계층이 있을 때 가장 상위 레벨의 블록은 한 개 뿐이므로 짝이 없는 잉여 블록입니다.</p>\n<center>\n<img loading=\"lazy\" src=\"https://www.dropbox.com/s/awi3ub878bhg1vl/surplus.png?raw=1\" width=\"100%\">\n</center>\n<p>잉여 블록은 최상위 블록 뿐만 아니라 홀수 개의 블록을 갖는 모든 레벨에 존재합니다. 위 그림은 최상위 레벨을 제외한 각 레벨의 블록 개수가 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">2^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> 이므로 잉여 블록이 없지만 만약 최하위 레벨이 7개의 블록을 가진다면 하위에서 상위 순으로 7 → 3 → 1 개의 블록을 가지게 되고 각 레벨에 모두 잉여 블록이 존재합니다.</p>\n<p>잉여 블록을 적용하기 위해 함수 <code class=\"language-text\">createBitmaps</code> 를 수정해 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">smallestBlockCount <span class=\"token operator\">=</span> <span class=\"token comment\"># 가장 작은 블록의 개수</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">createBitmaps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  bitmaps <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  blockCount <span class=\"token operator\">=</span> smallestBlockCount\n\n  <span class=\"token keyword\">while</span> blockCount <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">bytes</span> <span class=\"token operator\">=</span> blockCount <span class=\"token operator\">//</span> <span class=\"token number\">8</span>\n    <span class=\"token keyword\">if</span> blockCount <span class=\"token operator\">%</span> <span class=\"token number\">8</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n      <span class=\"token builtin\">bytes</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    bitmap <span class=\"token operator\">=</span> <span class=\"token builtin\">bytearray</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># e.g. bytearray[3] = [0, 0, 0]</span>\n\n    <span class=\"token comment\"># 잉여 블록 처리 코드</span>\n    <span class=\"token keyword\">if</span> blockCount <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\"># 마지막 비트맵의 8비트 중 마지막 비트를 1로 변경</span>\n      bitmap<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>blockCount <span class=\"token operator\">%</span> <span class=\"token number\">8</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    bitmaps<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>bitmap<span class=\"token punctuation\">)</span>\n    blockCount <span class=\"token operator\">//=</span> <span class=\"token number\">2</span>\n\n  <span class=\"token keyword\">return</span> bitmaps</code></pre></div>\n<p>최상위 블록이 잉여 블록인 상태에서 100바이트의 메모리를 요구하는 프로세스가 있다고 하겠습니다. 100바이트의 메모리는 <code class=\"language-text\">getBlockLevel(100)</code> 을 통해 레벨 2임을 알 수 있습니다. 하지만 초기 상태의 레벨 2 비트맵은 전부 0인 상태입니다. 버디 블록 알고리즘은 상위 레벨에 사용 가능한 블록이 있는지 탐색합니다. 레벨 2의 상위 레벨인 레벨 3에는 사용 가능한 블록이 있습니다. 레벨 3의 블록의 크기는 레벨 2블록 크기의 두 배이므로 레벨 3블록을 반으로 쪼개 그 중 하나를 사용하면 됩니다. 레벨 3의 블록을 반으로 쪼개면 아래와 같습니다.</p>\n<center>\n<img loading=\"lazy\" src=\"https://www.dropbox.com/s/m89gjemirqkk9ud/separate_upper_block.png?raw=1\" width=\"100%\">\n</center>\n<p>이제 레벨 2에 사용 가능한 블록이 존재하므로 이 중 하나를 사용하고 다른 하나는 사용 가능 블록으로 남겨 둡니다. 사용할 블록은 비트맵의 상태를 0으로 바꿔 줍니다. 남아 있는 사용 가능한 블록은 자연스럽게 잉여 블록이 됩니다.</p>\n<center>\n<img loading=\"lazy\" src=\"https://www.dropbox.com/s/nf2g4eco2e5d6x1/set_one_of_separated.png?raw=1\" width=\"100%\">\n</center>\n<p>100바이트의 메모리가 할당 된 후 이번엔 20바이트의 메모리를 요구하는 프로세스가 있다고 하겠습니다. 20바이트의 메모리는 <code class=\"language-text\">getBlockLevel(20)</code> 을 통해 레벨 0임을 알 수 있습니다. 현재 레벨 0에는 사용 가능한 블록이 없으니 레벨 1을 탐색해 보지만 레벨 1 역시 사용 가능한 블록이 없습니다. 따라서 레벨 2의 사용 가능한 블록을 쪼개 두 개의 레벨 1 블록을 사용 가능한 상태로 만들고, 다시 레벨 1 블록 중 하나를 쪼개 두 개의 레벨 0 블록을 사용 가능한 상태로 만듭니다.</p>\n<center>\n<img loading=\"lazy\" src=\"https://www.dropbox.com/s/r6jaawy96ngm5du/split_block.png?raw=1\" width=\"100%\">\n</center>\n<p>이 과정을 코드로 작성해 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">bitmaps <span class=\"token operator\">=</span> <span class=\"token comment\"># 각 레벨 별 블록의 상태를 저장하기 위한 비트맵 자료구조</span>\nsmallestBlockSize <span class=\"token operator\">=</span> <span class=\"token comment\"># 가장 작은 블록의 개수</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">allocateBlock</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># size 에 맞는 블럭 레벨</span>\n  level <span class=\"token operator\">=</span> getBlockLevel<span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\"># 원하는 레벨의 사용 가능 블록 인덱스</span>\n  idx <span class=\"token operator\">=</span> getAvailBlock<span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">)</span>\n\n  availLevel <span class=\"token operator\">=</span> level\n\n  <span class=\"token comment\"># 원하는 레벨에 사용 가능 블럭이 없다면 윗 레벨에서 탐색</span>\n  <span class=\"token keyword\">if</span> idx <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n    highestLevel <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>bitmaps<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">while</span> idx <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token keyword\">and</span> availLevel <span class=\"token operator\">&lt;</span> highestLevel<span class=\"token punctuation\">:</span>\n      availLevel <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n      idx <span class=\"token operator\">=</span> getAvailBlock<span class=\"token punctuation\">(</span>availLevel<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> idx <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\n\n  <span class=\"token comment\"># 상위 레벨에서 사용 가능 블록을 찾았다면 목표 레벨까지 블록 쪼개기</span>\n  <span class=\"token keyword\">if</span> level <span class=\"token operator\">!=</span> availLevel<span class=\"token punctuation\">:</span>\n    idx <span class=\"token operator\">=</span> splitBlock<span class=\"token punctuation\">(</span>availLevel<span class=\"token punctuation\">,</span> level<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\"># 블럭이 사용중임을 표시</span>\n  setBlockStat<span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>함수 <code class=\"language-text\">allocateBlock</code> 은 크게 네 부분으로 나눌 수 있습니다.</p>\n<p>먼저 이전에 작성한 함수 <code class=\"language-text\">getBlockLevel</code> 을 이용해 <code class=\"language-text\">size</code> 에 맞는 블록의 레벨을 구하고 해당 레벨에 사용 가능한 블록이 있는지 확인합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">allocateBlock</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  level <span class=\"token operator\">=</span> getBlockLevel<span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\"># 원하는 레벨의 사용 가능 블록 인덱스</span>\n  idx <span class=\"token operator\">=</span> getAvailBlock<span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>함수 <code class=\"language-text\">getAvailBlock</code> 은 비트맵을 이용해 <code class=\"language-text\">level</code> 에 속한 블록들 중 사용 가능한 블록이 있다면 그 인덱스를, 없다면 -1 을 반환합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">getAvailBlock</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  bitmap <span class=\"token operator\">=</span> bitmaps<span class=\"token punctuation\">[</span>level<span class=\"token punctuation\">]</span>\n  blockCount <span class=\"token operator\">=</span> smallestBlockCount <span class=\"token operator\">>></span> level\n  byteCount <span class=\"token operator\">=</span> blockCount <span class=\"token operator\">//</span> <span class=\"token number\">8</span>\n  <span class=\"token keyword\">if</span> blockCount <span class=\"token operator\">%</span> <span class=\"token number\">8</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n    byteCount <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n  <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>byteCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> bitmap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> bitmap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> j<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n          <span class=\"token keyword\">return</span> <span class=\"token number\">8</span> <span class=\"token operator\">*</span> i <span class=\"token operator\">+</span> j\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span></code></pre></div>\n<p>해당 레벨에 사용 가능한 블록이 없다면 레벨을 올려가며 사용 가능한 블록이 있는지 확인합니다. 만약 최상위 레벨까지 사용 가능한 블록이 없다면 현재 할당 가능한 블록이 전혀 없음을 뜻합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">allocateBlock</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n  availLevel <span class=\"token operator\">=</span> level\n\n  <span class=\"token comment\"># 원하는 레벨에 사용 가능 블럭이 없다면 윗 레벨에서 탐색</span>\n  <span class=\"token keyword\">if</span> idx <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n    highestLevel <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>bitmaps<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\n    <span class=\"token comment\"># 레벨을 하나씩 증가시키면서 사용 가능한 블록을 탐색</span>\n    <span class=\"token keyword\">while</span> idx <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token keyword\">and</span> availLevel <span class=\"token operator\">&lt;</span> highestLevel<span class=\"token punctuation\">:</span>\n      availLevel <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n      idx <span class=\"token operator\">=</span> getAvailBlock<span class=\"token punctuation\">(</span>availLevel<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> idx <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>사용 가능한 블록을 찾았다면 해당 블록이 원하는 레벨보다 상위 레벨인지 확인하고 상위라면 목표 레벨까지 블록들을 쪼갭니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">allocateBlock</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n  <span class=\"token comment\"># 상위 레벨에서 사용 가능 블록을 찾았다면 목표 레벨까지 블록 쪼개기</span>\n  <span class=\"token keyword\">if</span> level <span class=\"token operator\">!=</span> availLevel<span class=\"token punctuation\">:</span>\n    idx <span class=\"token operator\">=</span> splitBlock<span class=\"token punctuation\">(</span>availLevel<span class=\"token punctuation\">,</span> level<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>함수 <code class=\"language-text\">splitBlock</code> 은 사용 가능한 블록이 있는 레벨의 <code class=\"language-text\">idx</code> 번째 블록을 목표 레벨까지 쪼개고 목표 레벨의 사용 가능 블록 인덱스를 반환합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">splitBlock</span><span class=\"token punctuation\">(</span>from_<span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>from_<span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 현재 블록의 상태를 \"사용 중\" 으로 바꿈</span>\n    setBlockStat<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 현재 블록의 왼쪽 하위 블록의 상태를 \"사용 가능\" 으로 바꿈</span>\n    setBlockStat<span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> idx <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 현재 블록의 오른쪽 하위 블록의 상태를 \"사용 가능\" 으로 바꿈</span>\n    setBlockStat<span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> idx <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    idx <span class=\"token operator\">*=</span> <span class=\"token number\">2</span>\n  <span class=\"token keyword\">return</span> idx</code></pre></div>\n<p>마지막으로 사용 가능 해진 목표 레벨의 블록 상태를 \"사용 중\" 으로 바꿔줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">allocateBlock</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n  <span class=\"token comment\"># 블럭이 사용중임을 표시</span>\n  setBlockStat<span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">setBlockStat</code> 함수는 블록의 상태를 바꾸는 간단한 함수입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">setBlockStat</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">,</span> flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  bitmap <span class=\"token operator\">=</span> bitmaps<span class=\"token punctuation\">[</span>level<span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">if</span> flag <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n    bitmap<span class=\"token punctuation\">[</span>idx <span class=\"token operator\">//</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span><span class=\"token operator\">=</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>idx <span class=\"token operator\">%</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    bitmap<span class=\"token punctuation\">[</span>idx <span class=\"token operator\">//</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>idx <span class=\"token operator\">%</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">allocateBlock</code> 를 작성하면서 메모리 할당의 가장 중요한 부분을 완성했습니다. 지금까지 메모리 할당을 블록 할당 관점에서 살펴보았습니다. 실제 <code class=\"language-text\">malloc</code> 함수는 블록의 인덱스가 아닌 메모리 주소를 반환하므로 할당된 블록을 메모리 주소로 변환하는 작업이 필요합니다.\n함수 <code class=\"language-text\">allocateBlock</code> 에서 변수 <code class=\"language-text\">level</code> 과 <code class=\"language-text\">idx</code> 는 할당한 블록이 속한 레벨과 인덱스를 저장하고 있습니다. 가장 작은 블록의 크기를 <code class=\"language-text\">smallestBlockSize</code> 이라 할 때 <code class=\"language-text\">smallestBlockSize &lt;&lt; level</code> 은 <code class=\"language-text\">level</code> 에 속한 블록의 크기를 뜻합니다. 블록의 크기는 바이트 단위이므로 <code class=\"language-text\">(smallestBlockSize &lt;&lt; level) * idx</code> 는 <code class=\"language-text\">level</code> 의 <code class=\"language-text\">idx</code> 번째 블록의 상대 주소가 됩니다. 여기서 상대 주소란 버디 블록이 속한 메모리 공간의 시작점을 0이라 할 때 시작점으로부터의 거리를 뜻합니다. 따라서 시작점의 절대 주소를 알고 있다면, 절대 주소에 <code class=\"language-text\">(smallestBlockSize &lt;&lt; level) * idx</code> 를 더해 블록의 메모리 상 절대 주소를 알 수 있습니다. 정리하면 다음과 같습니다.</p>\n<center>\n<img loading=\"lazy\" src=\"https://www.dropbox.com/s/00v9k23oeph8er4/absolute_relative_address.png?raw=1\" width=\"100%\">\n</center>\n<ul>\n<li><code class=\"language-text\">smallestBlockSize &lt;&lt; level</code> = <code class=\"language-text\">level</code> 의 블록 크기</li>\n<li><code class=\"language-text\">(smallestBlockSize &lt;&lt; level) * idx</code> = <code class=\"language-text\">level</code> 의 <code class=\"language-text\">idx</code> 번째 블록의 상대 주소</li>\n<li>버디 블록이 속한 메모리 공간의 시작점 절대 주소를 <code class=\"language-text\">address</code> 라 할 때,\n<code class=\"language-text\">address + (smallestBlockSize &lt;&lt; level) * idx</code> = <code class=\"language-text\">level</code> 의 <code class=\"language-text\">idx</code> 번째 블록의 절대 주소</li>\n<li>만약 <code class=\"language-text\">idx</code> 가 0이라면 <code class=\"language-text\">address + (smallestBlockSize &lt;&lt; level) * idx</code> 는 <code class=\"language-text\">address + 0 = address</code> 이고, 이는 모든 레벨의 0번째 블록의 상대 주소는 0, 절대 주소는 <code class=\"language-text\">address</code> 임을 뜻합니다.</li>\n</ul>\n<p>함수 <code class=\"language-text\">allocateBlock</code> 이 할당 블록의 메모리 주소를 반환하도록 다음 코드를 추가하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">address <span class=\"token operator\">=</span> <span class=\"token comment\"># 0 번째 블록의 절대 주소</span>\nsmallestBlockSize <span class=\"token operator\">=</span> <span class=\"token comment\"># 가장 작은 블록의 개수</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">allocateBlock</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n  blockSize <span class=\"token operator\">=</span> smallestBlockSize <span class=\"token operator\">&lt;&lt;</span> level\n  relativeAddr <span class=\"token operator\">=</span> blockSize <span class=\"token operator\">*</span> idx\n\n  <span class=\"token keyword\">return</span> address <span class=\"token operator\">+</span> relativeAddr</code></pre></div>\n<p><br/><br/></p>\n<blockquote>\n<p>💡 가장 작은 블록의 크기는 어떻게 정할까<br/>\n블록 분할을 편하게 하기 위해 2의 지수승으로 정하는 것을 빼고는 프로그래머 마음입니다. 프로그램에서 작은 메모리를 빈번히 요구한다면 32바이트처럼 작은 크기도 괜찮지만 작을수록 비트맵 크기가 늘어나고 레벨이 많아져 블록 분할을 위한 연산이 많아짐을 고려해야합니다.</p>\n</blockquote>\n<p><br/><br/><br/><br/></p>\n<h3>메모리 해제</h3>\n<p>메모리 할당 함수 <code class=\"language-text\">void *malloc(size_t size)</code> 은 메모리 크기를 매개 변수로 받아 메모리의 절대 주소를 반환했습니다. 함수 <code class=\"language-text\">allocateBlock(size)</code> 역시 메모리 크기를 매개 변수로 받아 메모리의 절대 주소를 반환합니다. 메모리 해제 함수 <code class=\"language-text\">void free(void *ptr)</code> 는 할당 함수의 반환값이었던 절대 주소를 매개 변수로 받습니다. 버디 블록에서 메모리 해제의 핵심은 절대 주소를 이용해 블록의 레벨과 인덱스를 찾는 것입니다. 찾아낸 레벨과 인덱스는 대응하는 비트맵을 0으로 만드는 데 사용할 수 있습니다.</p>\n<center>\n<img loading=\"lazy\" src=\"https://www.dropbox.com/s/t1l4ctbb5ky6lhu/freeBlock_explain.png?raw=1\" width=\"80%\">\n</center>\n<p>함수 <code class=\"language-text\">allocateBlock</code> 의 마지막 과정에서 블록의 인덱스와 0번째 블록의 절대 주소를 이용해 블록의 절대 주소를 구할 수 있었습니다. 절대 주소는 0번째 블록의 절대 주소와 블록의 상대 주소를 더한 값이므로 0번째 블록의 절대 주소를 빼면 상대 주소를 구할 수 있습니다.</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>블록의 상대 주소</mtext><mo>=</mo><mtext>블록의 절대 주소</mtext><mo>−</mo><mn>0</mn><mtext>번째 블록의 절대 주소</mtext></mrow><annotation encoding=\"application/x-tex\">블록의\\text{ }상대\\text{ }주소 = 블록의\\text{ }절대\\text{ }주소 - 0번째\\text{ }블록의\\text{ }절대\\text{ }주소</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord hangul_fallback\">블</span><span class=\"mord hangul_fallback\">록</span><span class=\"mord hangul_fallback\">의</span><span class=\"mord text\"><span class=\"mord\"> </span></span><span class=\"mord hangul_fallback\">상</span><span class=\"mord hangul_fallback\">대</span><span class=\"mord text\"><span class=\"mord\"> </span></span><span class=\"mord hangul_fallback\">주</span><span class=\"mord hangul_fallback\">소</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord hangul_fallback\">블</span><span class=\"mord hangul_fallback\">록</span><span class=\"mord hangul_fallback\">의</span><span class=\"mord text\"><span class=\"mord\"> </span></span><span class=\"mord hangul_fallback\">절</span><span class=\"mord hangul_fallback\">대</span><span class=\"mord text\"><span class=\"mord\"> </span></span><span class=\"mord hangul_fallback\">주</span><span class=\"mord hangul_fallback\">소</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mord hangul_fallback\">번</span><span class=\"mord hangul_fallback\">째</span><span class=\"mord text\"><span class=\"mord\"> </span></span><span class=\"mord hangul_fallback\">블</span><span class=\"mord hangul_fallback\">록</span><span class=\"mord hangul_fallback\">의</span><span class=\"mord text\"><span class=\"mord\"> </span></span><span class=\"mord hangul_fallback\">절</span><span class=\"mord hangul_fallback\">대</span><span class=\"mord text\"><span class=\"mord\"> </span></span><span class=\"mord hangul_fallback\">주</span><span class=\"mord hangul_fallback\">소</span></span></span></span></span>\n<p>만약 상대 주소가 128이라면, 32바이트 블록으로 이루어진 레벨의 128 / 32 = 4번째, 64바이트 블록으로 이루어진 레벨의 128 / 64 = 2번째, 128바이트 블록으로 이루어진 레벨의 128 / 128 = 1번째 블록이 이 주소에 해당됩니다. 즉 블록이 속한 레벨만 알 수 있다면 인덱스는 나눗셈만으로 알 수 있습니다.\n상대 주소가 어떤 레벨의 블록을 가리키는지 기록하기 위해 두번째 메타 데이터 자료구조 <code class=\"language-text\">levelOfBlock</code>를 도입하겠습니다. <code class=\"language-text\">levelOfBlock</code> 는 최하위 레벨 블록의 개수만큼 엔트리를 가지는 배열입니다.</p>\n<center>\n<img loading=\"lazy\" src=\"https://www.dropbox.com/s/yo6teshumaz9gtn/level_of_blocks.png?raw=1\" width=\"80%\">\n</center>\n<p>그림에서 회색은 할당된 블록, 초록색은 사용 가능한 블록을 뜻합니다. 레벨 2의 할당된 블록을 살펴보겠습니다. 블록의 크기는 128 이고 1번째 블록이므로 상대 주소는 128 (128 x 1) 입니다. 상대 주소 128 은 최하위 레벨 블록 중 4번째 (128 / 32) 블록의 상대 주소와 같습니다.</p>\n<p>어느 레벨에 속하든지 블록의 상대 주소를 최소 블록 크기로 나누면 항상 같은 인덱스를 갖습니다. 만약 레벨 2의 블록 대신 레벨 1의 2번째 블록이 할당되었다면 블록의 상대 주소는 128 (64 x 2) 이고 이를 최소 블록 크기로 나누면 4 (128 / 32) 입니다. 레벨 2의 1번째 블록과 레벨 1의 2번째 블록은 둘 다 같은 상대주소 128 를 가지고 있고 <code class=\"language-text\">levelOfBlock</code> 에서 4번째 엔트리를 가리킵니다. 이 점을 이용해 배열 <code class=\"language-text\">levelOfBlock</code> 에 할당된 블록의 레벨을 저장할 수 있습니다.</p>\n<center>\n<img loading=\"lazy\" src=\"https://www.dropbox.com/s/b0stmxu8v8rzuxi/level_of_blocks_mapping.png?raw=1\" width=\"80%\">\n</center>\n<p><code class=\"language-text\">levelOfBlock</code> 에서 -1 은 해당 상대 주소에 아무 블록도 할당되지 않았다는 것을 의미합니다. 메모리 해제 함수를 작성하기 전에 먼저 할당 함수 <code class=\"language-text\">allocateBlock</code> 에 <code class=\"language-text\">levelOfBlock</code> 를 적용해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">bitmaps <span class=\"token operator\">=</span> <span class=\"token comment\"># 각 레벨 별 블록의 상태를 저장하기 위한 비트맵 자료구조</span>\nsmallestBlockSize <span class=\"token operator\">=</span> <span class=\"token comment\"># 가장 작은 블록의 개수</span>\nsmallestBlockCount <span class=\"token operator\">=</span> <span class=\"token comment\"># 가장 작은 블록의 개수</span>\n\n<span class=\"token comment\"># levelOfBlock 초기화</span>\nlevelOfBlock <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> smallestBlockCount\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">allocateBlock</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  level <span class=\"token operator\">=</span> getBlockLevel<span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span>\n  idx <span class=\"token operator\">=</span> <span class=\"token comment\"># level 의 할당 가능한 블록 인덱스</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n  blockSize <span class=\"token operator\">=</span> smallestBlockSize <span class=\"token operator\">&lt;&lt;</span> level\n  relativeAddr <span class=\"token operator\">=</span> blockSize <span class=\"token operator\">*</span> idx\n\n  <span class=\"token comment\"># levelOfBlock 에 블록의 레벨 저장</span>\n  levelOfBlock<span class=\"token punctuation\">[</span> relativeAddr <span class=\"token operator\">//</span> smallestBlockSize <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> level\n  <span class=\"token keyword\">return</span> address <span class=\"token operator\">+</span> relativeAddr</code></pre></div>\n<p><code class=\"language-text\">allocateBlock</code> 에서 블록을 할당할 때마다 <code class=\"language-text\">levelOfBlock</code> 에 레벨을 저장하므로 <code class=\"language-text\">freeBlock</code> 에서는 쉽게 상대 주소에 해당하는 블록의 레벨을 구할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">smallestBlockSize <span class=\"token operator\">=</span> <span class=\"token comment\"># 가장 작은 블록의 개수</span>\naddress <span class=\"token operator\">=</span> <span class=\"token comment\"># 버디 블록 메모리 공간의 시작점 절대 주소</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">freeBlock</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  relativeAddr <span class=\"token operator\">=</span> ptr <span class=\"token operator\">-</span> address\n  level <span class=\"token operator\">=</span> levelOfBlock<span class=\"token punctuation\">[</span> relativeAddr <span class=\"token operator\">//</span> smallestBlockSize <span class=\"token punctuation\">]</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>블록의 레벨을 알아냈으므로 블록의 인덱스를 구하는 것은 아주 쉽습니다. 레벨과 인덱스를 이용해 상대 주소를 구했던 과정을 역으로 풀면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">smallestBlockSize <span class=\"token operator\">=</span> <span class=\"token comment\"># 가장 작은 블록의 개수</span>\naddress <span class=\"token operator\">=</span> <span class=\"token comment\"># 버디 블록 메모리 공간의 시작점 절대 주소</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">freeBlock</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  relativeAddr <span class=\"token operator\">=</span> ptr <span class=\"token operator\">-</span> address\n  level <span class=\"token operator\">=</span> levelOfBlock<span class=\"token punctuation\">[</span> relativeAddr <span class=\"token operator\">//</span> smallestBlockSize <span class=\"token punctuation\">]</span>\n\n  blockSize <span class=\"token operator\">=</span> smallestBlockSize <span class=\"token operator\">&lt;&lt;</span> level\n\n  <span class=\"token comment\"># allocateBlock 에서는 상대 주소를 구하기 위해</span>\n  <span class=\"token comment\"># relativeAddr = blockSize * idx 와 같이 계산했다</span>\n  idx <span class=\"token operator\">=</span> relativeAddr <span class=\"token operator\">//</span> blockSize\n\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>만약 개발자가 실수로 <code class=\"language-text\">freeBlock(ptr)</code> 의 매개변수 <code class=\"language-text\">ptr</code> 를 할당받지 않는 임의의 주소값으로 전달하면 어떻게 될까요? C 코드에서 할당받지 않은 메모리 주소를 <code class=\"language-text\">free</code> 함수에 전달하면 <code class=\"language-text\">pointer being freed was not allocated</code> 에러를 내뿜습니다.\n<code class=\"language-text\">freeBlock</code> 도 예기치 않은 에러를 방지하기 위해 조건문을 추가하겠습니다. 만약 할당한 블록의 주소라면 <code class=\"language-text\">levelOfBlock</code> 의 엔트리 값을 아무 레벨의 블록도 할당하지 않았다는 뜻에서 -1 로 변경해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">smallestBlockSize <span class=\"token operator\">=</span> <span class=\"token comment\"># 가장 작은 블록의 개수</span>\naddress <span class=\"token operator\">=</span> <span class=\"token comment\"># 버디 블록 메모리 공간의 시작점 절대 주소</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">freeBlock</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  relativeAddr <span class=\"token operator\">=</span> ptr <span class=\"token operator\">-</span> address\n  level <span class=\"token operator\">=</span> levelOfBlock<span class=\"token punctuation\">[</span> relativeAddr <span class=\"token operator\">//</span> smallestBlockSize <span class=\"token punctuation\">]</span>\n\n  <span class=\"token comment\"># 할당된 메모리인지 확인</span>\n  <span class=\"token keyword\">if</span> level <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span>\n\n  <span class=\"token comment\"># levelOfBlock 의 엔트리 값을 -1 로 변경</span>\n  levelOfBlock<span class=\"token punctuation\">[</span> relativeAddr <span class=\"token operator\">//</span> smallestBlockSize <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n\n  blockSize <span class=\"token operator\">=</span> smallestBlockSize <span class=\"token operator\">&lt;&lt;</span> level\n  idx <span class=\"token operator\">=</span> relativeAddr <span class=\"token operator\">//</span> blockSize\n\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p><code class=\"language-text\">allocateBlock</code> 에서는 <code class=\"language-text\">bitmaps</code> 자료구조를 이용해 원하는 크기의 블록이 있는지 확인할 수 있었습니다. 만약 사용 가능한 블록이 없다면 상위 블록을 둘로 쪼갠 후 한 블록을 사용하고 나머지 하나는 잉여 블록으로 남겨 놓았습니다. <code class=\"language-text\">freeBlock</code> 에서는 이 과정을 역으로 진행합니다. 블록을 해제하면 <code class=\"language-text\">bitmaps</code> 의 대응하는 값이 0에서 1로 바뀌면서 사용 가능한 상태가 됩니다. 만약 해제한 블록의 짝 블록 역시 사용 가능한 상태라면 두 블록을 사용 불가 상태로 바꾸고 크기가 두 배인 상위 블록의 상태를 가능 상태로 만들어 줍니다. 마치 두 블록을 합쳐 하나의 블록으로 만드는 것과 같습니다.</p>\n<center>\n<img loading=\"lazy\" src=\"https://www.dropbox.com/s/8ur05m2mxrhaoq6/merge_block.png?raw=1\" width=\"100%\">\n</center>\n<p>위 과정을 함수 <code class=\"language-text\">mergeBlock</code> 로 만들어보겠습니다. 함수 <code class=\"language-text\">mergeBlock</code> 구현 과정에서 주의할 점은 짝 블록의 인덱스를 계산하는 방법입니다. 블록의 인덱스는 0부터 시작하므로 0-1, 2-3, 4-5 처럼 짝-홀 순으로 짝이 지어집니다. 블록의 인덱스를 <code class=\"language-text\">idx</code> 라 할 때 <code class=\"language-text\">idx</code> 가 홀수라면 짝 블록의 인덱스는 <code class=\"language-text\">idx - 1</code> 이고 <code class=\"language-text\">idx</code> 가 짝수라면 짝 블록의 인덱스는 <code class=\"language-text\">idx + 1</code> 입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">bitmaps <span class=\"token operator\">=</span> <span class=\"token comment\"># 각 레벨 별 블록의 상태를 저장하기 위한 비트맵 자료구조</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">mergeBlock</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  highestLevel <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>bitmaps<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\n  <span class=\"token comment\"># 블록이 사용 가능하고 최상위 레벨이 아닐 때 까지 반복</span>\n  <span class=\"token keyword\">while</span> level <span class=\"token operator\">&lt;</span> highestLevel <span class=\"token keyword\">and</span> getBlockStat<span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 짝 블록의 인덱스 계산</span>\n    buddyIdx <span class=\"token operator\">=</span> idx <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token keyword\">if</span> idx <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> idx <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\n    <span class=\"token comment\"># 짝 블록이 사용 가능 상태인지 확인</span>\n    <span class=\"token keyword\">if</span> getBlockStat<span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span> buddyIdx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\"># 사용 가능하다면 현재 블록과 짝 블록의 상태를 불가능으로 전환</span>\n      setBlockStat<span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      setBlockStat<span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span> buddyIdx<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token comment\"># 상위 블록의 상태를 가능으로 전환</span>\n      setBlockStat<span class=\"token punctuation\">(</span>level <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> idx <span class=\"token operator\">//</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\"># 짝 블록이 사용 불가능 상태라면</span>\n      <span class=\"token comment\"># 현재 블록을 사용 가능 상태로 남겨 놓은 채 더 이상 상위 레벨을 탐색하지 않음</span>\n      <span class=\"token keyword\">break</span>\n    level <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    idx <span class=\"token operator\">//=</span> <span class=\"token number\">2</span></code></pre></div>\n<p>마지막으로 함수 <code class=\"language-text\">freeBlock</code> 에 <code class=\"language-text\">mergeBlock</code> 코드 실행 구문을 넣겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">smallestBlockSize <span class=\"token operator\">=</span> <span class=\"token comment\"># 가장 작은 블록의 개수</span>\naddress <span class=\"token operator\">=</span> <span class=\"token comment\"># 버디 블록 메모리 공간의 시작점 절대 주소</span>\nbitmaps <span class=\"token operator\">=</span> <span class=\"token comment\"># 각 레벨 별 블록의 상태를 저장하기 위한 비트맵 자료구조</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">freeBlock</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  relativeAddr <span class=\"token operator\">=</span> ptr <span class=\"token operator\">-</span> address\n  level <span class=\"token operator\">=</span> levelOfBlock<span class=\"token punctuation\">[</span> relativeAddr <span class=\"token operator\">//</span> smallestBlockSize <span class=\"token punctuation\">]</span>\n\n  <span class=\"token comment\"># 할당된 메모리인지 확인</span>\n  <span class=\"token keyword\">if</span> level <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span>\n\n  <span class=\"token comment\"># levelOfBlock 의 엔트리 값을 -1 로 변경</span>\n  levelOfBlock<span class=\"token punctuation\">[</span> relativeAddr <span class=\"token operator\">//</span> smallestBlockSize <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n\n  blockSize <span class=\"token operator\">=</span> smallestBlockSize <span class=\"token operator\">&lt;&lt;</span> level\n  idx <span class=\"token operator\">=</span> relativeAddr <span class=\"token operator\">//</span> blockSize\n\n  <span class=\"token comment\"># 해제한 블록의 상태를 사용 가능으로 바꾼 뒤 mergeBlock</span>\n  setBlockStat<span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  mergeBlock<span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span></code></pre></div>\n<p>이렇게 해서 버디 블록 알고리즘 구현을 마쳤습니다. 알고리즘의 설명을 위해 상대 주소와 절대 주소, 잉여 블록 같은 다소 생소한 단어가 쓰였지만 알고 보면 더하고 곱하는 기본적인 사칙연산만으로 버디 블록 알고리즘은 구현 가능했습니다. 실제 동적 메모리 할당 구현은 C/C++ 과 같이 상대적으로 저수준 언어에서 필요하지만 코드의 간결성을 위해 python 으로 작성해보았습니다.\n마지막으로 지금까지 작성한 코드를 <code class=\"language-text\">BuddyBlockMemory</code> 라는 클래스로 모듈화해 보았습니다. 각 메소드의 의미를 곱씹어 보며 정리해 보시기 바랍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BuddyBlockMemory</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> smallestBlockSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    self<span class=\"token punctuation\">.</span>memory <span class=\"token operator\">=</span> <span class=\"token builtin\">bytearray</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>memory<span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">.</span>smallestBlockSize <span class=\"token operator\">=</span> smallestBlockSize\n    self<span class=\"token punctuation\">.</span>smallestBlockCount <span class=\"token operator\">=</span> size <span class=\"token operator\">//</span> smallestBlockSize\n    self<span class=\"token punctuation\">.</span>levelOfBlock <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>smallestBlockCount\n    self<span class=\"token punctuation\">.</span>bitmaps <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>createBitmaps<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">createBitmaps</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    bitmaps <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    blockCount <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>smallestBlockCount\n\n    <span class=\"token keyword\">while</span> blockCount <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n      <span class=\"token builtin\">bytes</span> <span class=\"token operator\">=</span> blockCount <span class=\"token operator\">//</span> <span class=\"token number\">8</span>\n      <span class=\"token keyword\">if</span> blockCount <span class=\"token operator\">%</span> <span class=\"token number\">8</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">bytes</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n      bitmap <span class=\"token operator\">=</span> <span class=\"token builtin\">bytearray</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> blockCount <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        bitmap<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>blockCount <span class=\"token operator\">%</span> <span class=\"token number\">8</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n      bitmaps<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>bitmap<span class=\"token punctuation\">)</span>\n      blockCount <span class=\"token operator\">//=</span> <span class=\"token number\">2</span>\n\n    <span class=\"token keyword\">return</span> bitmaps\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">allocateBlock</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># size 에 맞는 블럭 레벨</span>\n    level <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>getBlockLevel<span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 원하는 레벨의 사용 가능 블록 인덱스</span>\n    idx <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>getAvailBlock<span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">)</span>\n\n    availLevel <span class=\"token operator\">=</span> level\n\n    <span class=\"token comment\"># 원하는 레벨에 사용 가능 블럭이 없다면 윗 레벨에서 탐색</span>\n    <span class=\"token keyword\">if</span> idx <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n      highestLevel <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>bitmaps<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\n      <span class=\"token keyword\">while</span> idx <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token keyword\">and</span> availLevel <span class=\"token operator\">&lt;</span> highestLevel<span class=\"token punctuation\">:</span>\n        availLevel <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        idx <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>getAvailBlock<span class=\"token punctuation\">(</span>availLevel<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> idx <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\n\n    <span class=\"token keyword\">if</span> level <span class=\"token operator\">!=</span> availLevel<span class=\"token punctuation\">:</span>\n      idx <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>splitBlock<span class=\"token punctuation\">(</span>availLevel<span class=\"token punctuation\">,</span> level<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 블럭이 사용중임을 표시</span>\n    self<span class=\"token punctuation\">.</span>setBlockStat<span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n    blockSize <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>smallestBlockSize <span class=\"token operator\">&lt;&lt;</span> level\n    relativeAddr <span class=\"token operator\">=</span> blockSize <span class=\"token operator\">*</span> idx\n\n    <span class=\"token comment\"># 상대 메모리 주소를 이용해 해당 주소에 할당된 블록의 레벨 기록</span>\n    self<span class=\"token punctuation\">.</span>levelOfBlock<span class=\"token punctuation\">[</span> relativeAddr <span class=\"token operator\">//</span> self<span class=\"token punctuation\">.</span>smallestBlockSize <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> level\n\n    <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>address <span class=\"token operator\">+</span> relativeAddr\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">freeBlock</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    relativeAddr <span class=\"token operator\">=</span> ptr <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>address\n    level <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>levelOfBlock<span class=\"token punctuation\">[</span> relativeAddr <span class=\"token operator\">//</span> self<span class=\"token punctuation\">.</span>smallestBlockSize <span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\"># 할당된 메모리인지 확인</span>\n    <span class=\"token keyword\">if</span> level <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span>\n\n    <span class=\"token comment\"># 할당된 블록의 레벨 초기화</span>\n    self<span class=\"token punctuation\">.</span>levelOfBlock<span class=\"token punctuation\">[</span> relativeAddr <span class=\"token operator\">//</span> self<span class=\"token punctuation\">.</span>smallestBlockSize <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n\n    blockSize <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>smallestBlockSize <span class=\"token operator\">&lt;&lt;</span> level\n    idx <span class=\"token operator\">=</span> relativeAddr <span class=\"token operator\">//</span> blockSize\n\n    self<span class=\"token punctuation\">.</span>setBlockStat<span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">.</span>mergeBlock<span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">mergeBlock</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> level<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    highestLevel <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>bitmaps<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">while</span> level <span class=\"token operator\">&lt;</span> highestLevel <span class=\"token keyword\">and</span> self<span class=\"token punctuation\">.</span>getBlockStat<span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      buddyIdx <span class=\"token operator\">=</span> idx <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token keyword\">if</span> idx <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> idx <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n      <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>getBlockStat<span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span> buddyIdx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>setBlockStat<span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>setBlockStat<span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span> buddyIdx<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>setBlockStat<span class=\"token punctuation\">(</span>level <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> idx <span class=\"token operator\">//</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">break</span>\n      level <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n      idx <span class=\"token operator\">//=</span> <span class=\"token number\">2</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">getBlockLevel</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    level <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    blockSize <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>smallestBlockSize\n\n    <span class=\"token keyword\">while</span> size <span class=\"token operator\">></span> blockSize<span class=\"token punctuation\">:</span>\n      blockSize <span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n      level <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">return</span> level\n\n  <span class=\"token comment\"># level 의 블록 중 사용 가능한 블록의 인덱스를 반환</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">getAvailBlock</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> level<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    bitmap <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>bitmaps<span class=\"token punctuation\">[</span>level<span class=\"token punctuation\">]</span>\n    blockCount <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>smallestBlockCount <span class=\"token operator\">>></span> level\n    byteCount <span class=\"token operator\">=</span> blockCount <span class=\"token operator\">//</span> <span class=\"token number\">8</span>\n    <span class=\"token keyword\">if</span> blockCount <span class=\"token operator\">%</span> <span class=\"token number\">8</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n      byteCount <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>byteCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">if</span> bitmap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n          <span class=\"token keyword\">if</span> bitmap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> j<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">8</span> <span class=\"token operator\">*</span> i <span class=\"token operator\">+</span> j\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">setBlockStat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> level<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">,</span> flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    bitmap <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>bitmaps<span class=\"token punctuation\">[</span>level<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">if</span> flag <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n      bitmap<span class=\"token punctuation\">[</span>idx <span class=\"token operator\">//</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span><span class=\"token operator\">=</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>idx <span class=\"token operator\">%</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n      bitmap<span class=\"token punctuation\">[</span>idx <span class=\"token operator\">//</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>idx <span class=\"token operator\">%</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">getBlockStat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> level<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    bitmap <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>bitmaps<span class=\"token punctuation\">[</span>level<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span> <span class=\"token keyword\">if</span> bitmap<span class=\"token punctuation\">[</span>idx <span class=\"token operator\">//</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>idx <span class=\"token operator\">%</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> <span class=\"token number\">1</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">splitBlock</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> from_<span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>from_<span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      self<span class=\"token punctuation\">.</span>setBlockStat<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      self<span class=\"token punctuation\">.</span>setBlockStat<span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> idx <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n      self<span class=\"token punctuation\">.</span>setBlockStat<span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> idx <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n      idx <span class=\"token operator\">*=</span> <span class=\"token number\">2</span>\n    <span class=\"token keyword\">return</span> idx</code></pre></div>","frontmatter":{"date":"2021년 04월 24일","slug":"/buddy-block","title":"버디 블록 알고리즘","tags":["메모리 단편화","동적 메모리"],"category":["운영체제"],"description":"메모리 외부 단편화를 해결하는 방법"}}},"pageContext":{"slug":"/buddy-block","categories":[{"category":"선형대수학","count":26,"href":"/category/선형대수학"},{"category":"그래픽스","count":14,"href":"/category/그래픽스"},{"category":"병렬 프로그래밍","count":3,"href":"/category/병렬 프로그래밍"},{"category":"최적화 문제","count":3,"href":"/category/최적화 문제"},{"category":"알고리즘","count":2,"href":"/category/알고리즘"},{"category":"미적분","count":2,"href":"/category/미적분"},{"category":"테크니컬 라이팅","count":1,"href":"/category/테크니컬 라이팅"},{"category":"자료구조","count":1,"href":"/category/자료구조"},{"category":"운영체제","count":1,"href":"/category/운영체제"}],"tags":[{"tag":"코딩 더 매트릭스","count":24,"href":"/tag/코딩 더 매트릭스"},{"tag":"python","count":24,"href":"/tag/python"},{"tag":"레이 트레이싱","count":7,"href":"/tag/레이 트레이싱"},{"tag":"알고리즘","count":4,"href":"/tag/알고리즘"},{"tag":"OpenCL","count":3,"href":"/tag/OpenCL"},{"tag":"C","count":3,"href":"/tag/C"},{"tag":"회전","count":3,"href":"/tag/회전"},{"tag":"행렬","count":2,"href":"/tag/행렬"},{"tag":"그래픽스","count":2,"href":"/tag/그래픽스"},{"tag":"벡터","count":2,"href":"/tag/벡터"},{"tag":"라그랑주 승수법","count":2,"href":"/tag/라그랑주 승수법"},{"tag":"테크니컬 라이팅","count":1,"href":"/tag/테크니컬 라이팅"},{"tag":"힙","count":1,"href":"/tag/힙"},{"tag":"최대힙","count":1,"href":"/tag/최대힙"},{"tag":"최소힙","count":1,"href":"/tag/최소힙"},{"tag":"우선 순위 큐","count":1,"href":"/tag/우선 순위 큐"},{"tag":"javascript","count":1,"href":"/tag/javascript"},{"tag":"메모리 단편화","count":1,"href":"/tag/메모리 단편화"},{"tag":"동적 메모리","count":1,"href":"/tag/동적 메모리"},{"tag":"기저","count":1,"href":"/tag/기저"},{"tag":"정렬","count":1,"href":"/tag/정렬"},{"tag":"연결 리스트","count":1,"href":"/tag/연결 리스트"},{"tag":"문자열 탐색","count":1,"href":"/tag/문자열 탐색"},{"tag":"복소수","count":1,"href":"/tag/복소수"},{"tag":"사원수","count":1,"href":"/tag/사원수"},{"tag":"쿼터니언","count":1,"href":"/tag/쿼터니언"},{"tag":"선형대수학","count":1,"href":"/tag/선형대수학"},{"tag":"Gradient 벡터","count":1,"href":"/tag/Gradient 벡터"},{"tag":"편미분","count":1,"href":"/tag/편미분"},{"tag":"전미분","count":1,"href":"/tag/전미분"},{"tag":"확률분포","count":1,"href":"/tag/확률분포"}]}}}