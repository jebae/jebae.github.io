{"componentChunkName":"component---src-containers-post-layout-tsx","path":"/opencl-basic-2","result":{"data":{"markdownRemark":{"html":"<h3>이어지는 OpenCL 코드 작성</h3>\n<p><strong>5. 커널 실행</strong></p>\n<p>이전 포스트에서 프로그램을 빌드하고 <code class=\"language-text\">clCreateKernel</code> 함수로 커널 구조체를 생성했습니다. 커널을 실행하기 위해서는 작성한 커널의 매개변수를 설정해 주어야 합니다. 예를 들어 이전 포스트에서 작성한 아래 커널 소스는 매개변수로 메모리 오브젝트를 필요로 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// example.cl</span>\n\n__kernel <span class=\"token keyword\">void</span> <span class=\"token function\">get_unit_idx</span><span class=\"token punctuation\">(</span>__global <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>out<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span>\t\tidx <span class=\"token operator\">=</span> <span class=\"token function\">get_global_id</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tout<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> idx<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>커널의 매개변수를 설정하는 함수 <code class=\"language-text\">clSetKernelArg</code> 는 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">cl_int <span class=\"token function\">clSetKernelArg</span><span class=\"token punctuation\">(</span>\n\tcl_kernel kernel<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 커널 구조체</span>\n\tcl_uint arg_index<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 매개변수의 인덱스</span>\n\tsize_t arg_size<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 매개변수의 크기</span>\n  \t<span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>arg_value <span class=\"token comment\">// 매개변수의 포인터</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>커널 <code class=\"language-text\">get_unit_idx</code> 의 매개변수로서 메모리 오브젝트를 전달한다면 다음과 같이 쓸 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">clSetKernelArg</span><span class=\"token punctuation\">(</span>kernel<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>dev_mem_obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dev_mem_obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>메모리 오브젝트가 아닌 데이터를 호스트 프로그램에서 직접 매개변수로 전달할 수 도 있습니다. 예를 들어 결과값이 될 메모리 각각에 호스트 프로그램에서 전달한 값을 저장 한다면 다음과 같이 소스를 작성하고 두 개의 매개변수를 전달합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// example.cl</span>\n\n__kernel <span class=\"token keyword\">void</span> <span class=\"token function\">set_x</span><span class=\"token punctuation\">(</span>__global <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>out<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span>\t\tidx <span class=\"token operator\">=</span> <span class=\"token function\">get_global_id</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tout<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span>\tx <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">clSetKernelArg</span><span class=\"token punctuation\">(</span>kernel<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>dev_mem_obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dev_mem_obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">clSetKernelArg</span><span class=\"token punctuation\">(</span>kernel<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><br/><br/>\n매개변수 설정이 완료되면 실행될 커널을 커맨드 큐에 추가합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">cl_int <span class=\"token function\">clEnqueueNDRangeKernel</span><span class=\"token punctuation\">(</span>\n\tcl_command_queue command_queue<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 커맨드 큐 구조체</span>\n  \tcl_kernel kernel<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 커널 구조체</span>\n  \tcl_uint work_dim<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 연산 유닛들이 자리한 grid 의 차원</span>\n  \t<span class=\"token keyword\">const</span> size_t <span class=\"token operator\">*</span>global_work_offset<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 오프셋(현재는 지원하지 않음)</span>\n  \t<span class=\"token keyword\">const</span> size_t <span class=\"token operator\">*</span>global_work_size<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 연산 유닛의 사이즈</span>\n  \t<span class=\"token keyword\">const</span> size_t <span class=\"token operator\">*</span>local_work_size<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 연산 유닛의 local 그룹별 사이즈</span>\n  \tcl_uint num_events_in_wait_list<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 커맨드가 실행되기 전의 이벤트 커맨드 개수</span>\n  \t<span class=\"token keyword\">const</span> cl_event <span class=\"token operator\">*</span>event_wait_list<span class=\"token punctuation\">,</span><span class=\"token comment\">// 커맨드가 실행되기 전의 이벤트 커맨드 리스트</span>\n  \tcl_event <span class=\"token operator\">*</span>event <span class=\"token comment\">// 이벤트 오브젝트</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>함수 <code class=\"language-text\">clEnqueueNDRangeKernel</code> 의 ND 는 N Dimension 을 뜻합니다. 커널 연산을 수행하는 유닛들은 global 계층에서의 인덱스, local 계층에서의 인덱스가 각각의 차원에서 정해집니다. 예를 들어 아래 그림의 연산 유닛 <strong>k</strong>는 global 계층에서 가로축에 대해 3, 세로축에 대해 2의 인덱스를 갖고 local 계층에서는 가로축에 대해 3, 세로축에 대해 0의 인덱스를 갖습니다.</p>\n<center>\n<img loading=\"lazy\" src=\"https://www.dropbox.com/s/f5u5hn0jnmiz371/dimension_grid.jpg?raw=1\" width=\"60%\"/>\n</center>\n<p>위 그림처럼 연산 유닛들의 grid 를 형성하자면 다음과 같이 함수 <code class=\"language-text\">clEnqueueNDRangeKernel</code> 의 매개변수를 전달합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">size_t global_work_size <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nsize_t local_work_size <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">clEnqueueNDRangeKernel</span><span class=\"token punctuation\">(</span>command_queue<span class=\"token punctuation\">,</span> kernel<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> global_work_size<span class=\"token punctuation\">,</span> local_work_size<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><br/><br/>\n커널 <code class=\"language-text\">get_unit_idx</code> 의 <code class=\"language-text\">get_global_id(dim)</code> 함수는 매개변수 <code class=\"language-text\">dim</code> 을 차원의 인덱스로서 전달받습니다. 예를 들어 <code class=\"language-text\">get_global_id(1)</code> 은 연산 유닛의 global 계층상 두번째 차원에서의 인덱스를 반환합니다.</p>\n<p>우리가 사용할 커널 <code class=\"language-text\">get_unit_idx</code> 은 첫번째 차원에서의 인덱스를 메모리에 저장하는 간단한 커널이므로 아래와 같이 1차원의 연산 유닛 grid 를 형성하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">NUM_ELEMENTS\t<span class=\"token number\">256</span></span></span>\n\nsize_t global_work_size <span class=\"token operator\">=</span> NUM_ELEMENTS<span class=\"token punctuation\">;</span>\nsize_t local_work_size <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">clEnqueueNDRangeKernel</span><span class=\"token punctuation\">(</span>command_queue<span class=\"token punctuation\">,</span> kernel<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>global_work_size<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>local_work_size<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><br/><br/>\n<code class=\"language-text\">clSetKernelArg</code> 에 의해 커널의 매개변수로서 전달된 메모리 오브젝트는 연산이 끝난 후 호스트 프로그램에서 쓸 수 있는 메모리로 반환되어야 합니다. 이를 위해 커맨드 큐에 메모리 오브젝트를 호스트의 버퍼로 복사하는 커맨드를 추가합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">cl_int <span class=\"token function\">clEnqueueReadBuffer</span><span class=\"token punctuation\">(</span>\n\tcl_command_queue command_queue<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 커맨드 큐 구조체</span>\n  \tcl_mem buffer<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 읽어낼 메모리 오브젝트</span>\n  \tcl_bool blocking_read<span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\">/*\n\t** TRUE : 메모리를 읽는 프로세스가 끝날 때 까지 함수가 결과를 반환하지 않음\n\t** FALSE : 메모리를 읽는 프로세스가 끝날 때 까지 ptr 을 사용할 수 없음\n\t*/</span>\n  \tsize_t offset<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 메모리 오브젝트를 읽어 들일 오프셋</span>\n  \tsize_t cb<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 읽어 들일 사이즈</span>\n  \t<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 메모리 오브젝트의 데이터가 복사될 호스트의 버퍼</span>\n  \tcl_uint num_events_in_wait_list<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 커맨드가 실행되기 전의 이벤트 커맨드 개수</span>\n  \t<span class=\"token keyword\">const</span> cl_event <span class=\"token operator\">*</span>event_wait_list<span class=\"token punctuation\">,</span><span class=\"token comment\">// 커맨드가 실행되기 전의 이벤트 커맨드 리스트</span>\n  \tcl_event <span class=\"token operator\">*</span>event <span class=\"token comment\">// 이벤트 오브젝트</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>데이터를 복사할 호스트의 버퍼를 만들어 메모리 오브젝트를 읽어 냅니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>host_buf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> NUM_ELEMENTS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">clEnqueueReadBuffer</span><span class=\"token punctuation\">(</span>command_queue<span class=\"token punctuation\">,</span> dev_mem_obj<span class=\"token punctuation\">,</span> CL_TRUE<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\\\n\t<span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>host_buf<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> NUM_ELEMENTS<span class=\"token punctuation\">,</span> host_buf<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><br/><br/>\n커맨드 큐에 담긴 모든 커맨드는 아래 두 함수를 이용해 실행합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">cl_int <span class=\"token function\">clFlush</span><span class=\"token punctuation\">(</span>cl_command_queue command_queue<span class=\"token punctuation\">)</span>\ncl_int <span class=\"token function\">clFinish</span><span class=\"token punctuation\">(</span>cl_command_queue command_queue<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">clFlush</code> 는 큐의 모든 커맨드를 디바이스에 전달합니다. 디바이스에 전달된 커맨드들은 <code class=\"language-text\">clFinish</code> 함수에 의해 실행이 완료됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">clFlush</span><span class=\"token punctuation\">(</span>command_queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">clFinish</span><span class=\"token punctuation\">(</span>command_queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><br/><br/>\n<strong>6. 각각의 구조체 해제</strong></p>\n<p>context, 커널 구조체, 프로그램 구조체, 메모리 오브젝트, 커맨드 큐 구조체는 병렬 연산이 끝나면 메모리를 해제해 주어야 합니다. 메모리 해제 함수는 <code class=\"language-text\">clRelease...</code> 형식을 갖고 아래와 같이 호출합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">clReleaseKernel</span><span class=\"token punctuation\">(</span>kernel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">clReleaseProgram</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">clReleaseMemObject</span><span class=\"token punctuation\">(</span>dev_mem_obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">clReleaseCommandQueue</span><span class=\"token punctuation\">(</span>command_queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">clReleaseContext</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이전 포스트부터 지금까지 OpenCL 을 이용해 연산 유닛의 grid 상 인덱스를 출력하기까지의 과정을 알아보았습니다. 아래는 커널 소스와 지금까지의 과정을 다시 한번 정리한 코드입니다.</p>\n<p><br/><br/></p>\n<p><strong>example.c</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;OpenCL/cl.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">NUM_ELEMENTS <span class=\"token number\">256</span></span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">example1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>host_buf<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>source_str<span class=\"token punctuation\">;</span>\n\tcl_int ret<span class=\"token punctuation\">;</span>\n\tcl_platform_id platform<span class=\"token punctuation\">;</span>\n\tcl_device_id device<span class=\"token punctuation\">;</span>\n\tcl_context context<span class=\"token punctuation\">;</span>\n\tcl_command_queue command_queue<span class=\"token punctuation\">;</span>\n\tcl_program program<span class=\"token punctuation\">;</span>\n\tcl_kernel kernel<span class=\"token punctuation\">;</span>\n\tcl_mem dev_mem_obj<span class=\"token punctuation\">;</span>\n\tsize_t global_work_size <span class=\"token operator\">=</span> NUM_ELEMENTS<span class=\"token punctuation\">;</span>\n\tsize_t local_work_size <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n\thost_buf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> NUM_ELEMENTS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/* 병렬 연산을 수행할 디바이스 ID 쿼리 */</span>\n\t<span class=\"token function\">clGetPlatformIDs</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>platform<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">clGetDeviceIDs</span><span class=\"token punctuation\">(</span>platform<span class=\"token punctuation\">,</span> CL_DEVICE_TYPE_GPU<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>device<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/* context 와 커맨드 큐 구조체 생성 */</span>\n\tcontext <span class=\"token operator\">=</span> <span class=\"token function\">clCreateContext</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>device<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcommand_queue <span class=\"token operator\">=</span> <span class=\"token function\">clCreateCommandQueue</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> device<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/*\n\t** 아래는 .cl 파일의 소스를 문자열로 복사하는 코드입니다.\n\t** get_file_content 와 같은 기능을 하는 함수는 어렵지 않게 만드실 수 있습니다.\n\t*/</span>\n\tfd <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kernels/setidx.cl\"</span><span class=\"token punctuation\">,</span> O_RDONLY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsource_str <span class=\"token operator\">=</span> <span class=\"token function\">get_file_content</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/* 프로그램 구조체 생성 */</span>\n\tprogram <span class=\"token operator\">=</span> <span class=\"token function\">clCreateProgramWithSource</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>source_str<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">clBuildProgram</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>device<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/* 커널 구조체 생성 */</span>\n\tkernel <span class=\"token operator\">=</span> <span class=\"token function\">clCreateKernel</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span> <span class=\"token string\">\"get_unit_idx\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/* 메모리 오브젝트 생성 */</span>\n\tdev_mem_obj <span class=\"token operator\">=</span> <span class=\"token function\">clCreateBuffer</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> CL_MEM_WRITE_ONLY<span class=\"token punctuation\">,</span>\\\n\t\t<span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>host_buf<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> NUM_ELEMENTS<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/* 커널 매개변수 설정 */</span>\n\t<span class=\"token function\">clSetKernelArg</span><span class=\"token punctuation\">(</span>kernel<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>dev_mem_obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dev_mem_obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/* 커맨드 큐에 커널과 메모리 읽는 커맨드 추가 */</span>\n\t<span class=\"token function\">clEnqueueNDRangeKernel</span><span class=\"token punctuation\">(</span>command_queue<span class=\"token punctuation\">,</span> kernel<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>\\\n\t\t<span class=\"token operator\">&amp;</span>global_work_size<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>local_work_size<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">clEnqueueReadBuffer</span><span class=\"token punctuation\">(</span>command_queue<span class=\"token punctuation\">,</span> dev_mem_obj<span class=\"token punctuation\">,</span> CL_TRUE<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\\\n\t\t<span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>host_buf<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> NUM_ELEMENTS<span class=\"token punctuation\">,</span> host_buf<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/* 커맨드 큐에 추가된 커맨드 실행 */</span>\n\t<span class=\"token function\">clFlush</span><span class=\"token punctuation\">(</span>command_queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">clFinish</span><span class=\"token punctuation\">(</span>command_queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/* 필요한 구조체 메모리 해제 */</span>\n\t<span class=\"token function\">clReleaseKernel</span><span class=\"token punctuation\">(</span>kernel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">clReleaseProgram</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">clReleaseMemObject</span><span class=\"token punctuation\">(</span>dev_mem_obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">clReleaseCommandQueue</span><span class=\"token punctuation\">(</span>command_queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">clReleaseContext</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> NUM_ELEMENTS<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> host_buf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>host_buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><br/><br/></p>\n<p><strong>kernels/setidx.cl</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">__kernel <span class=\"token keyword\">void</span> <span class=\"token function\">get_unit_idx</span><span class=\"token punctuation\">(</span>__global <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>out<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span>     idx <span class=\"token operator\">=</span> <span class=\"token function\">get_global_id</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    out<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> idx<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">main</code> 함수에서 <code class=\"language-text\">example1</code> 함수를 호출하면 다음과 같이 출력됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span> <span class=\"token number\">5</span> <span class=\"token number\">6</span> <span class=\"token number\">7</span> <span class=\"token number\">8</span> <span class=\"token number\">9</span> <span class=\"token number\">10</span> <span class=\"token number\">11</span> <span class=\"token number\">12</span> <span class=\"token number\">13</span> <span class=\"token number\">14</span> <span class=\"token number\">15</span> <span class=\"token number\">16</span> <span class=\"token number\">17</span> <span class=\"token number\">18</span> <span class=\"token number\">19</span> <span class=\"token number\">20</span> <span class=\"token number\">21</span> <span class=\"token number\">22</span> <span class=\"token number\">23</span> <span class=\"token number\">24</span> <span class=\"token number\">25</span> <span class=\"token number\">26</span> <span class=\"token number\">27</span> <span class=\"token number\">28</span> <span class=\"token number\">29</span> <span class=\"token number\">30</span> <span class=\"token number\">31</span> <span class=\"token number\">32</span> <span class=\"token number\">33</span> <span class=\"token number\">34</span> <span class=\"token number\">35</span> <span class=\"token number\">36</span> <span class=\"token number\">37</span> <span class=\"token number\">38</span> <span class=\"token number\">39</span> <span class=\"token number\">40</span> <span class=\"token number\">41</span> <span class=\"token number\">42</span> <span class=\"token number\">43</span> <span class=\"token number\">44</span> <span class=\"token number\">45</span> <span class=\"token number\">46</span> <span class=\"token number\">47</span> <span class=\"token number\">48</span> <span class=\"token number\">49</span> <span class=\"token number\">50</span> <span class=\"token number\">51</span> <span class=\"token number\">52</span> <span class=\"token number\">53</span> <span class=\"token number\">54</span> <span class=\"token number\">55</span> <span class=\"token number\">56</span> <span class=\"token number\">57</span> <span class=\"token number\">58</span> <span class=\"token number\">59</span> <span class=\"token number\">60</span> <span class=\"token number\">61</span> <span class=\"token number\">62</span> <span class=\"token number\">63</span> <span class=\"token number\">64</span> <span class=\"token number\">65</span> <span class=\"token number\">66</span> <span class=\"token number\">67</span> <span class=\"token number\">68</span> <span class=\"token number\">69</span> <span class=\"token number\">70</span> <span class=\"token number\">71</span> <span class=\"token number\">72</span> <span class=\"token number\">73</span> <span class=\"token number\">74</span> <span class=\"token number\">75</span> <span class=\"token number\">76</span> <span class=\"token number\">77</span> <span class=\"token number\">78</span> <span class=\"token number\">79</span> <span class=\"token number\">80</span> <span class=\"token number\">81</span> <span class=\"token number\">82</span> <span class=\"token number\">83</span> <span class=\"token number\">84</span> <span class=\"token number\">85</span> <span class=\"token number\">86</span> <span class=\"token number\">87</span> <span class=\"token number\">88</span> <span class=\"token number\">89</span> <span class=\"token number\">90</span> <span class=\"token number\">91</span> <span class=\"token number\">92</span> <span class=\"token number\">93</span> <span class=\"token number\">94</span> <span class=\"token number\">95</span> <span class=\"token number\">96</span> <span class=\"token number\">97</span> <span class=\"token number\">98</span> <span class=\"token number\">99</span> <span class=\"token number\">100</span> <span class=\"token number\">101</span> <span class=\"token number\">102</span> <span class=\"token number\">103</span> <span class=\"token number\">104</span> <span class=\"token number\">105</span> <span class=\"token number\">106</span> <span class=\"token number\">107</span> <span class=\"token number\">108</span> <span class=\"token number\">109</span> <span class=\"token number\">110</span> <span class=\"token number\">111</span> <span class=\"token number\">112</span> <span class=\"token number\">113</span> <span class=\"token number\">114</span> <span class=\"token number\">115</span> <span class=\"token number\">116</span> <span class=\"token number\">117</span> <span class=\"token number\">118</span> <span class=\"token number\">119</span> <span class=\"token number\">120</span> <span class=\"token number\">121</span> <span class=\"token number\">122</span> <span class=\"token number\">123</span> <span class=\"token number\">124</span> <span class=\"token number\">125</span> <span class=\"token number\">126</span> <span class=\"token number\">127</span> <span class=\"token number\">128</span> <span class=\"token number\">129</span> <span class=\"token number\">130</span> <span class=\"token number\">131</span> <span class=\"token number\">132</span> <span class=\"token number\">133</span> <span class=\"token number\">134</span> <span class=\"token number\">135</span> <span class=\"token number\">136</span> <span class=\"token number\">137</span> <span class=\"token number\">138</span> <span class=\"token number\">139</span> <span class=\"token number\">140</span> <span class=\"token number\">141</span> <span class=\"token number\">142</span> <span class=\"token number\">143</span> <span class=\"token number\">144</span> <span class=\"token number\">145</span> <span class=\"token number\">146</span> <span class=\"token number\">147</span> <span class=\"token number\">148</span> <span class=\"token number\">149</span> <span class=\"token number\">150</span> <span class=\"token number\">151</span> <span class=\"token number\">152</span> <span class=\"token number\">153</span> <span class=\"token number\">154</span> <span class=\"token number\">155</span> <span class=\"token number\">156</span> <span class=\"token number\">157</span> <span class=\"token number\">158</span> <span class=\"token number\">159</span> <span class=\"token number\">160</span> <span class=\"token number\">161</span> <span class=\"token number\">162</span> <span class=\"token number\">163</span> <span class=\"token number\">164</span> <span class=\"token number\">165</span> <span class=\"token number\">166</span> <span class=\"token number\">167</span> <span class=\"token number\">168</span> <span class=\"token number\">169</span> <span class=\"token number\">170</span> <span class=\"token number\">171</span> <span class=\"token number\">172</span> <span class=\"token number\">173</span> <span class=\"token number\">174</span> <span class=\"token number\">175</span> <span class=\"token number\">176</span> <span class=\"token number\">177</span> <span class=\"token number\">178</span> <span class=\"token number\">179</span> <span class=\"token number\">180</span> <span class=\"token number\">181</span> <span class=\"token number\">182</span> <span class=\"token number\">183</span> <span class=\"token number\">184</span> <span class=\"token number\">185</span> <span class=\"token number\">186</span> <span class=\"token number\">187</span> <span class=\"token number\">188</span> <span class=\"token number\">189</span> <span class=\"token number\">190</span> <span class=\"token number\">191</span> <span class=\"token number\">192</span> <span class=\"token number\">193</span> <span class=\"token number\">194</span> <span class=\"token number\">195</span> <span class=\"token number\">196</span> <span class=\"token number\">197</span> <span class=\"token number\">198</span> <span class=\"token number\">199</span> <span class=\"token number\">200</span> <span class=\"token number\">201</span> <span class=\"token number\">202</span> <span class=\"token number\">203</span> <span class=\"token number\">204</span> <span class=\"token number\">205</span> <span class=\"token number\">206</span> <span class=\"token number\">207</span> <span class=\"token number\">208</span> <span class=\"token number\">209</span> <span class=\"token number\">210</span> <span class=\"token number\">211</span> <span class=\"token number\">212</span> <span class=\"token number\">213</span> <span class=\"token number\">214</span> <span class=\"token number\">215</span> <span class=\"token number\">216</span> <span class=\"token number\">217</span> <span class=\"token number\">218</span> <span class=\"token number\">219</span> <span class=\"token number\">220</span> <span class=\"token number\">221</span> <span class=\"token number\">222</span> <span class=\"token number\">223</span> <span class=\"token number\">224</span> <span class=\"token number\">225</span> <span class=\"token number\">226</span> <span class=\"token number\">227</span> <span class=\"token number\">228</span> <span class=\"token number\">229</span> <span class=\"token number\">230</span> <span class=\"token number\">231</span> <span class=\"token number\">232</span> <span class=\"token number\">233</span> <span class=\"token number\">234</span> <span class=\"token number\">235</span> <span class=\"token number\">236</span> <span class=\"token number\">237</span> <span class=\"token number\">238</span> <span class=\"token number\">239</span> <span class=\"token number\">240</span> <span class=\"token number\">241</span> <span class=\"token number\">242</span> <span class=\"token number\">243</span> <span class=\"token number\">244</span> <span class=\"token number\">245</span> <span class=\"token number\">246</span> <span class=\"token number\">247</span> <span class=\"token number\">248</span> <span class=\"token number\">249</span> <span class=\"token number\">250</span> <span class=\"token number\">251</span> <span class=\"token number\">252</span> <span class=\"token number\">253</span> <span class=\"token number\">254</span> <span class=\"token number\">255</span></code></pre></div>\n<p><br/><br/>\n이번에는 연산 유닛의 grid, local 상 인덱스를 쉽게 파악할 수 있는 커널을 만들어 보겠습니다. 각각의 차원의 인덱스를 이용해 아래와 같은 출력 결과를 얻고자 합니다.</p>\n<center>\n<img loading=\"lazy\" src=\"https://www.dropbox.com/s/nd5s4twda342q3r/multidim_group_idx.jpg?raw=1\" width=\"90%\"/>\n</center>\n<p>2개의 차원을 사용하므로 아래와 같이 매크로 상수를 설정해 놓겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">NUM_ELEMENTS_X <span class=\"token number\">16</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">NUM_ELEMENTS_Y <span class=\"token number\">16</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token function\">NUM_ELEMENTS</span> <span class=\"token punctuation\">(</span>NUM_ELEMENTS_X <span class=\"token operator\">*</span> NUM_ELEMENTS_Y<span class=\"token punctuation\">)</span></span></span></code></pre></div>\n<p><code class=\"language-text\">clEnqueueNDRangeKernel</code> 의 매개변수로 사용할 연산 유닛의 grid 크기와 local 그룹별 크기는 각각의 차원에 따라 크기를 정하기 위해 배열로 선언합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">size_t global_work_size<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>NUM_ELEMENTS_X<span class=\"token punctuation\">,</span> NUM_ELEMENTS_Y<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nsize_t local_work_size<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><br/><br/>\n이전의 예시와 마찬가지로 하나의 플랫폼으로부터 하나의 디바이스(GPU)를 사용할 예정입니다. 따라서 수정할 코드는 <code class=\"language-text\">clEnqueueNDRangeKernel</code> 의 매개변수와 커널 소스 파일의 이름뿐입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">/*\n** 커널 소스를 문자열 변수에 직접 할당했거나\n** 파일 디스크립터가 아닌 파일 포인터를 사용하셨다면\n** 아래 코드의 수정 사항은 다를 수 있습니다.\n*/</span>\nfd <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kernels/set_group_index.cl\"</span><span class=\"token punctuation\">,</span> O_RDONLY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token comment\">/*\n** 차원의 개수를 나타내는 매개변수를 변경합니다.\n** 변수 global_work_size 와 local_work_size 가 배열이므로 포인터 연산자 &amp; 을 지웁니다.\n*/</span>\n<span class=\"token function\">clEnqueueNDRangeKernel</span><span class=\"token punctuation\">(</span>command_queue<span class=\"token punctuation\">,</span> kernel<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>\\\n\tglobal_work_size<span class=\"token punctuation\">,</span> local_work_size<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>유닛 연산의 결과를 출력할 코드는 아래와 같이 수정합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> NUM_ELEMENTS_Y<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> NUM_ELEMENTS_X<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%3d \"</span><span class=\"token punctuation\">,</span> host_buf<span class=\"token punctuation\">[</span>NUM_ELEMENTS_X <span class=\"token operator\">*</span> i <span class=\"token operator\">+</span> j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><br/><br/>\n이전에 하나의 차원에서 grid 상 인덱스를 얻기 위해 <code class=\"language-text\">get_global_id</code> 를 사용했다면 이번에는 각각의 차원과 local 그룹에서의 인덱스를 얻기 위해 다음과 같은 함수를 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">get_group_id</span><span class=\"token punctuation\">(</span>dim<span class=\"token punctuation\">)</span> <span class=\"token comment\">// dim 차원에서 local 그룹의 grid 계층상 인덱스</span>\n<span class=\"token function\">get_local_id</span><span class=\"token punctuation\">(</span>dim<span class=\"token punctuation\">)</span> <span class=\"token comment\">// dim 차원에서 local 계층상 유닛의 인덱스</span>\n<span class=\"token function\">get_local_size</span><span class=\"token punctuation\">(</span>dim<span class=\"token punctuation\">)</span> <span class=\"token comment\">// dim 차원에서 하나의 local 그룹의 유닛 개수</span>\n<span class=\"token function\">get_num_groups</span><span class=\"token punctuation\">(</span>dim<span class=\"token punctuation\">)</span> <span class=\"token comment\">// dim 차원에서 local 그룹의 개수</span></code></pre></div>\n<center>\n<img loading=\"lazy\" src=\"https://www.dropbox.com/s/7ruhjhnuzgtrhku/multidim_group_idx_2.jpg?raw=1\" width=\"90%\"/>\n</center>\n<p>위 함수들을 이용해 우리가 원하는 출력결과를 얻으려면 아래와 같이 커널 소스를 작성할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">__kernel <span class=\"token keyword\">void</span> <span class=\"token function\">set_group_index</span><span class=\"token punctuation\">(</span>__global <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>out<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> idx_x <span class=\"token operator\">=</span> <span class=\"token function\">get_group_id</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">get_local_size</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">get_local_id</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> idx_y <span class=\"token operator\">=</span> <span class=\"token function\">get_group_id</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">get_local_size</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">get_local_id</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> row_size <span class=\"token operator\">=</span> <span class=\"token function\">get_num_groups</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">get_local_size</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> idx_y <span class=\"token operator\">*</span> row_size <span class=\"token operator\">+</span> idx_x<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token function\">get_local_size</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">get_local_size</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>\n\t\t\t<span class=\"token punctuation\">(</span><span class=\"token function\">get_num_groups</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">get_group_id</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">get_group_id</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n\t\t\t<span class=\"token punctuation\">(</span><span class=\"token function\">get_local_id</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">get_local_size</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">get_local_id</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tout<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>출력 결과는 아래와 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">  <span class=\"token number\">0</span>   <span class=\"token number\">1</span>   <span class=\"token number\">2</span>   <span class=\"token number\">3</span>  <span class=\"token number\">16</span>  <span class=\"token number\">17</span>  <span class=\"token number\">18</span>  <span class=\"token number\">19</span>  <span class=\"token number\">32</span>  <span class=\"token number\">33</span>  <span class=\"token number\">34</span>  <span class=\"token number\">35</span>  <span class=\"token number\">48</span>  <span class=\"token number\">49</span>  <span class=\"token number\">50</span>  <span class=\"token number\">51</span>\n  <span class=\"token number\">4</span>   <span class=\"token number\">5</span>   <span class=\"token number\">6</span>   <span class=\"token number\">7</span>  <span class=\"token number\">20</span>  <span class=\"token number\">21</span>  <span class=\"token number\">22</span>  <span class=\"token number\">23</span>  <span class=\"token number\">36</span>  <span class=\"token number\">37</span>  <span class=\"token number\">38</span>  <span class=\"token number\">39</span>  <span class=\"token number\">52</span>  <span class=\"token number\">53</span>  <span class=\"token number\">54</span>  <span class=\"token number\">55</span>\n  <span class=\"token number\">8</span>   <span class=\"token number\">9</span>  <span class=\"token number\">10</span>  <span class=\"token number\">11</span>  <span class=\"token number\">24</span>  <span class=\"token number\">25</span>  <span class=\"token number\">26</span>  <span class=\"token number\">27</span>  <span class=\"token number\">40</span>  <span class=\"token number\">41</span>  <span class=\"token number\">42</span>  <span class=\"token number\">43</span>  <span class=\"token number\">56</span>  <span class=\"token number\">57</span>  <span class=\"token number\">58</span>  <span class=\"token number\">59</span>\n <span class=\"token number\">12</span>  <span class=\"token number\">13</span>  <span class=\"token number\">14</span>  <span class=\"token number\">15</span>  <span class=\"token number\">28</span>  <span class=\"token number\">29</span>  <span class=\"token number\">30</span>  <span class=\"token number\">31</span>  <span class=\"token number\">44</span>  <span class=\"token number\">45</span>  <span class=\"token number\">46</span>  <span class=\"token number\">47</span>  <span class=\"token number\">60</span>  <span class=\"token number\">61</span>  <span class=\"token number\">62</span>  <span class=\"token number\">63</span>\n <span class=\"token number\">64</span>  <span class=\"token number\">65</span>  <span class=\"token number\">66</span>  <span class=\"token number\">67</span>  <span class=\"token number\">80</span>  <span class=\"token number\">81</span>  <span class=\"token number\">82</span>  <span class=\"token number\">83</span>  <span class=\"token number\">96</span>  <span class=\"token number\">97</span>  <span class=\"token number\">98</span>  <span class=\"token number\">99</span> <span class=\"token number\">112</span> <span class=\"token number\">113</span> <span class=\"token number\">114</span> <span class=\"token number\">115</span>\n <span class=\"token number\">68</span>  <span class=\"token number\">69</span>  <span class=\"token number\">70</span>  <span class=\"token number\">71</span>  <span class=\"token number\">84</span>  <span class=\"token number\">85</span>  <span class=\"token number\">86</span>  <span class=\"token number\">87</span> <span class=\"token number\">100</span> <span class=\"token number\">101</span> <span class=\"token number\">102</span> <span class=\"token number\">103</span> <span class=\"token number\">116</span> <span class=\"token number\">117</span> <span class=\"token number\">118</span> <span class=\"token number\">119</span>\n <span class=\"token number\">72</span>  <span class=\"token number\">73</span>  <span class=\"token number\">74</span>  <span class=\"token number\">75</span>  <span class=\"token number\">88</span>  <span class=\"token number\">89</span>  <span class=\"token number\">90</span>  <span class=\"token number\">91</span> <span class=\"token number\">104</span> <span class=\"token number\">105</span> <span class=\"token number\">106</span> <span class=\"token number\">107</span> <span class=\"token number\">120</span> <span class=\"token number\">121</span> <span class=\"token number\">122</span> <span class=\"token number\">123</span>\n <span class=\"token number\">76</span>  <span class=\"token number\">77</span>  <span class=\"token number\">78</span>  <span class=\"token number\">79</span>  <span class=\"token number\">92</span>  <span class=\"token number\">93</span>  <span class=\"token number\">94</span>  <span class=\"token number\">95</span> <span class=\"token number\">108</span> <span class=\"token number\">109</span> <span class=\"token number\">110</span> <span class=\"token number\">111</span> <span class=\"token number\">124</span> <span class=\"token number\">125</span> <span class=\"token number\">126</span> <span class=\"token number\">127</span>\n<span class=\"token number\">128</span> <span class=\"token number\">129</span> <span class=\"token number\">130</span> <span class=\"token number\">131</span> <span class=\"token number\">144</span> <span class=\"token number\">145</span> <span class=\"token number\">146</span> <span class=\"token number\">147</span> <span class=\"token number\">160</span> <span class=\"token number\">161</span> <span class=\"token number\">162</span> <span class=\"token number\">163</span> <span class=\"token number\">176</span> <span class=\"token number\">177</span> <span class=\"token number\">178</span> <span class=\"token number\">179</span>\n<span class=\"token number\">132</span> <span class=\"token number\">133</span> <span class=\"token number\">134</span> <span class=\"token number\">135</span> <span class=\"token number\">148</span> <span class=\"token number\">149</span> <span class=\"token number\">150</span> <span class=\"token number\">151</span> <span class=\"token number\">164</span> <span class=\"token number\">165</span> <span class=\"token number\">166</span> <span class=\"token number\">167</span> <span class=\"token number\">180</span> <span class=\"token number\">181</span> <span class=\"token number\">182</span> <span class=\"token number\">183</span>\n<span class=\"token number\">136</span> <span class=\"token number\">137</span> <span class=\"token number\">138</span> <span class=\"token number\">139</span> <span class=\"token number\">152</span> <span class=\"token number\">153</span> <span class=\"token number\">154</span> <span class=\"token number\">155</span> <span class=\"token number\">168</span> <span class=\"token number\">169</span> <span class=\"token number\">170</span> <span class=\"token number\">171</span> <span class=\"token number\">184</span> <span class=\"token number\">185</span> <span class=\"token number\">186</span> <span class=\"token number\">187</span>\n<span class=\"token number\">140</span> <span class=\"token number\">141</span> <span class=\"token number\">142</span> <span class=\"token number\">143</span> <span class=\"token number\">156</span> <span class=\"token number\">157</span> <span class=\"token number\">158</span> <span class=\"token number\">159</span> <span class=\"token number\">172</span> <span class=\"token number\">173</span> <span class=\"token number\">174</span> <span class=\"token number\">175</span> <span class=\"token number\">188</span> <span class=\"token number\">189</span> <span class=\"token number\">190</span> <span class=\"token number\">191</span>\n<span class=\"token number\">192</span> <span class=\"token number\">193</span> <span class=\"token number\">194</span> <span class=\"token number\">195</span> <span class=\"token number\">208</span> <span class=\"token number\">209</span> <span class=\"token number\">210</span> <span class=\"token number\">211</span> <span class=\"token number\">224</span> <span class=\"token number\">225</span> <span class=\"token number\">226</span> <span class=\"token number\">227</span> <span class=\"token number\">240</span> <span class=\"token number\">241</span> <span class=\"token number\">242</span> <span class=\"token number\">243</span>\n<span class=\"token number\">196</span> <span class=\"token number\">197</span> <span class=\"token number\">198</span> <span class=\"token number\">199</span> <span class=\"token number\">212</span> <span class=\"token number\">213</span> <span class=\"token number\">214</span> <span class=\"token number\">215</span> <span class=\"token number\">228</span> <span class=\"token number\">229</span> <span class=\"token number\">230</span> <span class=\"token number\">231</span> <span class=\"token number\">244</span> <span class=\"token number\">245</span> <span class=\"token number\">246</span> <span class=\"token number\">247</span>\n<span class=\"token number\">200</span> <span class=\"token number\">201</span> <span class=\"token number\">202</span> <span class=\"token number\">203</span> <span class=\"token number\">216</span> <span class=\"token number\">217</span> <span class=\"token number\">218</span> <span class=\"token number\">219</span> <span class=\"token number\">232</span> <span class=\"token number\">233</span> <span class=\"token number\">234</span> <span class=\"token number\">235</span> <span class=\"token number\">248</span> <span class=\"token number\">249</span> <span class=\"token number\">250</span> <span class=\"token number\">251</span>\n<span class=\"token number\">204</span> <span class=\"token number\">205</span> <span class=\"token number\">206</span> <span class=\"token number\">207</span> <span class=\"token number\">220</span> <span class=\"token number\">221</span> <span class=\"token number\">222</span> <span class=\"token number\">223</span> <span class=\"token number\">236</span> <span class=\"token number\">237</span> <span class=\"token number\">238</span> <span class=\"token number\">239</span> <span class=\"token number\">252</span> <span class=\"token number\">253</span> <span class=\"token number\">254</span> <span class=\"token number\">255</span></code></pre></div>\n<p><br/><br/>\nOpenCL 의 API 를 이용해 연산 유닛의 계층 구조까지 알아보았습니다. 지금까지의 예시는 병렬 연산의 장점을 보여주지 않았습니다. 다음 포스트에서는 반복적으로 많은 연산을 필요로 하는 프랙탈 그리기 예제를 OpenCL API 를 이용해 구현해 보겠습니다.</p>\n<p><br/><br/><br/><br/></p>\n<h3>참고</h3>\n<ul>\n<li><a href=\"https://www.fz-juelich.de/SharedDocs/Downloads/IAS/JSC/EN/slides/opencl/opencl-03-basics.pdf?__blob=publicationFile\">www.fz-juelich.de</a></li>\n</ul>","frontmatter":{"date":"2019년 08월 03일","slug":"/opencl-basic-2","title":"OpenCL 기초 (2)","tags":["OpenCL"],"category":["병렬 프로그래밍"],"description":"OpenCL 을 이용한 병렬 프로그래밍"}}},"pageContext":{"slug":"/opencl-basic-2","categories":[{"category":"선형대수학","count":26,"href":"/category/선형대수학"},{"category":"그래픽스","count":14,"href":"/category/그래픽스"},{"category":"병렬 프로그래밍","count":3,"href":"/category/병렬 프로그래밍"},{"category":"최적화 문제","count":3,"href":"/category/최적화 문제"},{"category":"알고리즘","count":2,"href":"/category/알고리즘"},{"category":"미적분","count":2,"href":"/category/미적분"},{"category":"테크니컬 라이팅","count":1,"href":"/category/테크니컬 라이팅"},{"category":"자료구조","count":1,"href":"/category/자료구조"},{"category":"운영체제","count":1,"href":"/category/운영체제"}],"tags":[{"tag":"코딩 더 매트릭스","count":24,"href":"/tag/코딩 더 매트릭스"},{"tag":"python","count":24,"href":"/tag/python"},{"tag":"레이 트레이싱","count":7,"href":"/tag/레이 트레이싱"},{"tag":"알고리즘","count":4,"href":"/tag/알고리즘"},{"tag":"OpenCL","count":3,"href":"/tag/OpenCL"},{"tag":"C","count":3,"href":"/tag/C"},{"tag":"회전","count":3,"href":"/tag/회전"},{"tag":"행렬","count":2,"href":"/tag/행렬"},{"tag":"그래픽스","count":2,"href":"/tag/그래픽스"},{"tag":"벡터","count":2,"href":"/tag/벡터"},{"tag":"라그랑주 승수법","count":2,"href":"/tag/라그랑주 승수법"},{"tag":"테크니컬 라이팅","count":1,"href":"/tag/테크니컬 라이팅"},{"tag":"힙","count":1,"href":"/tag/힙"},{"tag":"최대힙","count":1,"href":"/tag/최대힙"},{"tag":"최소힙","count":1,"href":"/tag/최소힙"},{"tag":"우선 순위 큐","count":1,"href":"/tag/우선 순위 큐"},{"tag":"javascript","count":1,"href":"/tag/javascript"},{"tag":"메모리 단편화","count":1,"href":"/tag/메모리 단편화"},{"tag":"동적 메모리","count":1,"href":"/tag/동적 메모리"},{"tag":"기저","count":1,"href":"/tag/기저"},{"tag":"정렬","count":1,"href":"/tag/정렬"},{"tag":"연결 리스트","count":1,"href":"/tag/연결 리스트"},{"tag":"문자열 탐색","count":1,"href":"/tag/문자열 탐색"},{"tag":"복소수","count":1,"href":"/tag/복소수"},{"tag":"사원수","count":1,"href":"/tag/사원수"},{"tag":"쿼터니언","count":1,"href":"/tag/쿼터니언"},{"tag":"선형대수학","count":1,"href":"/tag/선형대수학"},{"tag":"Gradient 벡터","count":1,"href":"/tag/Gradient 벡터"},{"tag":"편미분","count":1,"href":"/tag/편미분"},{"tag":"전미분","count":1,"href":"/tag/전미분"},{"tag":"확률분포","count":1,"href":"/tag/확률분포"}]}}}