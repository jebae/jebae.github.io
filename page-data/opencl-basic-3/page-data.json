{"componentChunkName":"component---src-containers-post-layout-tsx","path":"/opencl-basic-3","result":{"data":{"markdownRemark":{"html":"<h3>프랙탈 (Fractal)</h3>\n<p>프랙탈은 자기 유사성을 가지는 기하학적 구조입니다. 자기 유사성은 같은 패턴에 대해 재귀 또는 반복을 이용해 구현합니다. 아래 그림은 처음 삼각형의 한변에 대해 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mn>1</mn><mn>3</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{1}{3}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mn>2</mn><mn>3</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{2}{3}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> 지점에서 새로운 삼각형이 만들어지는 반복적인 패턴을 보여주고 있습니다.</p>\n<center>\n<img src=\"https://www.dropbox.com/s/ffv8eqgo4df1gsn/Von_Koch_curve.gif?raw=1\" width=\"30%\"/>\n</center>\n<p>이번 글에서 다룰 프랙탈은 망델브로(Mandelbrot) 집합입니다. 망델브로 집합은 이미지 버퍼의 각각의 픽셀을 <a href=\"/coding-the-matrix-field-complex\">복소 평면</a>의 좌표로 변환 후 반복연산을 수행해 그릴 수 있습니다. 망델브로 집합은 픽셀마다 같은 연산을 수행하므로 병렬 프로그래밍을 적용하기에 적합한 예제입니다.</p>\n<p>각각의 픽셀에서는 아래와 같이 복소수 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>z</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">z_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 과 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> 에 대한 수열 연산이 수행됩니다.</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mi>z</mi><mn>0</mn></msub><mo>=</mo><mi>c</mi><mspace linebreak=\"newline\"></mspace><msub><mi>z</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><msubsup><mi>z</mi><mi>n</mi><mn>2</mn></msubsup><mo>+</mo><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">z_0 = c \\\\\nz_{n + 1} = z_n^2 + c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.638891em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1111079999999998em;vertical-align:-0.247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.04398em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span></span>\n<p>위 식의 상수 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> 의 값으로서 각각의 이미지 버퍼 상 픽셀에 대응하는 복소수를 대입하게 됩니다. 상수 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> 를 점화식의 초기값으로 시작해 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>z</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">z_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 의 절댓값이 2보다 크면 수열은 발산한다고 할 수 있습니다. 이 때 2라는 값은 발산하는 수열의 계산을 미리 막아 주는 역할을 하며, 경계값이라고 부릅니다. 수열이 발산하면 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> 는 집합에 속하지 않습니다. 반면에 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>z</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">z_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 의 절댓값이 2보다 작을 경우 계산이 무한히 반복되므로 반복 횟수에 제한을 둬야 합니다. 이를 반영한 식은 병렬 연산을 수행할 OpenCL 의 커널에 작성하게 됩니다.</p>\n<p><br/><br/></p>\n<h3>병렬 연산 코드</h3>\n<p><strong>0. 복소수 구조체 정의</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span>\t\t<span class=\"token class-name\">s_complex</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\t\t\t\t\tt_complex<span class=\"token punctuation\">;</span></code></pre></div>\n<p>구조체 멤버 <code class=\"language-text\">r</code> 은 실수부, <code class=\"language-text\">i</code> 는 허수부를 뜻합니다.</p>\n<p><br/><br/></p>\n<p><strong>1. 복소 평면의 범위 설정</strong></p>\n<p>이미지 버퍼가 띄워질 윈도우의 가로 세로 크기를 고려해 복소 평면의 범위를 설정합니다. </p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token directive keyword\">define</span> <span class=\"token expression\">COORD_WIDTH <span class=\"token number\">5.0f</span> </span><span class=\"token comment\">// 복소 평면의 실수부 넓이</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token directive keyword\">define</span> <span class=\"token expression\">WINDOW_WIDTH <span class=\"token number\">1000</span> </span><span class=\"token comment\">// 윈도우 넓이</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token directive keyword\">define</span> <span class=\"token expression\">WINDOW_HEIGHT <span class=\"token number\">800</span> </span><span class=\"token comment\">// 윈도우 높이</span></span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\nt_complex <span class=\"token function\">init_entry_point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tt_complex point<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> coord_height<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> window_width <span class=\"token operator\">=</span> WINDOW_WIDTH<span class=\"token punctuation\">;</span>\n\n\tpoint<span class=\"token punctuation\">.</span>r <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1.0f</span> <span class=\"token operator\">*</span> COORD_WIDTH <span class=\"token operator\">/</span> <span class=\"token number\">2.0f</span><span class=\"token punctuation\">;</span>\n\tcoord_height <span class=\"token operator\">=</span> COORD_WIDTH <span class=\"token operator\">*</span> WINDOW_HEIGHT <span class=\"token operator\">/</span> window_width<span class=\"token punctuation\">;</span>\n\tpoint<span class=\"token punctuation\">.</span>i <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1.0f</span> <span class=\"token operator\">*</span> coord_height <span class=\"token operator\">/</span> <span class=\"token number\">2.0f</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">float</span> <span class=\"token function\">init_delta</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>COORD_WIDTH <span class=\"token operator\">/</span> WINDOW_WIDTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>함수 <code class=\"language-text\">init_entry_point</code> 는 매크로 상수로 정의된 윈도우 넓이, 높이와 복소 평면의 실수부 넓이를 바탕으로 복소평면의 가장 왼쪽, 위의 복소수 좌표를 반환합니다. 이는 이미지 버퍼의 가장 왼쪽, 위 픽셀과 대응됩니다. <code class=\"language-text\">init_delta</code> 는 윈도우 넓이와 복소평면의 넓이의 비율을 이용해 픽셀 사이 간격의 복소 평면 상 비율을 반환합니다. 두 함수의 반환값과 OpenCL 연산 유닛의 global 인덱스를 이용해 각 픽셀에 대응하는 복소수를 구할 수 있습니다.</p>\n<p><br/><br/></p>\n<p><strong>2. OpenCL 오브젝트 생성</strong></p>\n<p>오브젝트 생성은 <a href=\"/opencl-basic-1\">OpenCL 기초 (1)</a> 과 <a href=\"/opencl-basic-2\">OpenCL 기초 (2)</a> 에서 연습용 예제를 통해 작성한 코드와 크게 다르지 않습니다. 다만 이미지 버퍼를 윈도우에 출력하는 과정은 이 글에서 생략하겠습니다 (필자의 경우 외부에서 제공하고 있는 그래픽 라이브러리를 사용). 병렬 연산의 결과인 이미지 버퍼가 반환된 후엔 OpenGL 또는 Vulkan 과 같은 익숙한 그래픽 라이브러리를 사용해 윈도우에 출력하시면 됩니다. </p>\n<p>이어지는 글에서 다루게 될 OpenCL API 의 자세한 설명은 <a href=\"/opencl-basic-1\">이전 포스트</a>나 <a href=\"https://www.khronos.org/registry/OpenCL/sdk/1.0/docs/man/xhtml/\">공식문서</a>를 참고하시기 바랍니다.</p>\n<p><br/><br/>\n오브젝트 생성을 위한 첫 단계로 OpenCL API 를 이용해 플랫폼과 디바이스 ID 를 얻습니다. 이번 예제는 GPU 디바이스 하나만 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">cl_platform_id platform<span class=\"token punctuation\">;</span>\ncl_device_id device<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">clGetPlatformIDs</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>platform<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">clGetDeviceIDs</span><span class=\"token punctuation\">(</span>platform<span class=\"token punctuation\">,</span> CL_DEVICE_TYPE_GPU<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>device<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>다음으로 OpenCL 에서 수행되는 커널과 메모리를 관리하는 context 와 실행될 커맨드를 담을 커맨드 큐 구조체를 생성합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> ret<span class=\"token punctuation\">;</span>\ncl_context context<span class=\"token punctuation\">;</span>\ncl_command_queue command_queue<span class=\"token punctuation\">;</span>\n\ncontext <span class=\"token operator\">=</span> <span class=\"token function\">clCreateContext</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>device<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncommand_queue <span class=\"token operator\">=</span> <span class=\"token function\">clCreateCommandQueue</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> device<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그리고 다음 섹션에서 작성하게 될 커널을 사용할 수 있도록 프로그램과 커널 구조체를 생성합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> ret<span class=\"token punctuation\">;</span>\ncl_program program<span class=\"token punctuation\">;</span>\ncl_kernel kernel<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>source_str<span class=\"token punctuation\">;</span>\n\nprogram <span class=\"token operator\">=</span> <span class=\"token function\">clCreateProgramWithSource</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>source_str<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">clBuildProgram</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>device<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nkernel <span class=\"token operator\">=</span> <span class=\"token function\">clCreateKernel</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span> <span class=\"token string\">\"fractal\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 때 커널 소스를 문자열 변수 <code class=\"language-text\">source_str</code> 에 저장하는 과정은 이전 포스트와 마찬가지로 생략하겠습니다. 파일 디스크립터, 파일 포인터를 이용하거나 문자열 상수로서 커널 소스를 작성하셔도 무방합니다. <code class=\"language-text\">clCreateKernel(program, &quot;fractal&quot;, &amp;ret);</code> 에서 <code class=\"language-text\">&quot;fractal&quot;</code> 은 커널의 이름이고 다음 섹션에서 작성하게 됩니다.</p>\n<p>커널의 매개변수이자 병렬 연산의 결과인 메모리 오브젝트를 생성하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>host_buf <span class=\"token operator\">=</span> <span class=\"token comment\">/* 동적 할당 또는 그래픽 라이브러리의 이미지 버퍼 */</span><span class=\"token punctuation\">;</span>\ncl_mem dev_mem_obj<span class=\"token punctuation\">;</span>\nsize_t global_work_size <span class=\"token operator\">=</span> WINDOW_WIDTH <span class=\"token operator\">*</span> WINDOW_HEIGHT<span class=\"token punctuation\">;</span>\n\ndev_mem_obj <span class=\"token operator\">=</span> <span class=\"token function\">clCreateBuffer</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> CL_MEM_WRITE_ONLY<span class=\"token punctuation\">,</span>\\\n    <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>host_buf<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> global_work_size<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 코드로 생성된 메모리 오브젝트는 연산이 끝난 뒤 호스트의 이미지 버퍼 변수 <code class=\"language-text\">host_buf</code> 에 복사됩니다. <code class=\"language-text\">global_work_size</code> 는 global 계층의 연산 유닛의 개수를 의미하고 만델브로 집합에 대한 병렬 연산은 각 픽셀에 대해 똑같이 수행되므로 모든 픽셀의 개수인 윈도우의 넓이 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>×</mo></mrow><annotation encoding=\"application/x-tex\">\\times</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">×</span></span></span></span> 높이를 할당합니다.</p>\n<p><br/><br/></p>\n<p><strong>3. 커널</strong></p>\n<p>메모리 오브젝트의 생성까지 병렬 연산의 준비 과정을 마쳤습니다. 이제 만델브로 집합의 복소수 연산 커널을 작성해 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// fractal.cl</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">MAX_ITERATION <span class=\"token number\">100</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">WHITE <span class=\"token number\">0xFFFFFF</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">BLACK <span class=\"token number\">0x000000</span></span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span>      <span class=\"token class-name\">s_complex</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">float</span> r<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>                   t_complex<span class=\"token punctuation\">;</span></code></pre></div>\n<p>커널 소스에 매크로 상수와 구조체를 정의했습니다. OpenCL 커널 코드를 작성하기 위한 언어인 OpenCL C 는 C99 기반의 언어이고 C 에서 지원하는 문법 및 개념을 OpenCL 에서도 사용할 수 있습니다. 구조체 <code class=\"language-text\">s_complex</code> 는 호스트에서 정의한 <code class=\"language-text\">s_complex</code> 와 크기, 멤버가 같습니다. 이는 호스트에서 구한 가장 왼쪽 위 픽셀의 복소수 좌표를 데이터의 손실없이 디바이스에 전달하기 위함입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// fractal.cl</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">iteration</span><span class=\"token punctuation\">(</span>t_complex z<span class=\"token punctuation\">,</span> t_complex c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> aa<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> bb<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> two_ab<span class=\"token punctuation\">;</span>\n\n    i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> MAX_ITERATION<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        aa <span class=\"token operator\">=</span> z<span class=\"token punctuation\">.</span>r <span class=\"token operator\">*</span> z<span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">;</span>\n        bb <span class=\"token operator\">=</span> z<span class=\"token punctuation\">.</span>i <span class=\"token operator\">*</span> z<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">;</span>\n        two_ab <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> z<span class=\"token punctuation\">.</span>r <span class=\"token operator\">*</span> z<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>aa <span class=\"token operator\">+</span> bb <span class=\"token operator\">></span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>WHITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        z<span class=\"token punctuation\">.</span>r <span class=\"token operator\">=</span> aa <span class=\"token operator\">-</span> bb <span class=\"token operator\">+</span> c<span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">;</span>\n        z<span class=\"token punctuation\">.</span>i <span class=\"token operator\">=</span> two_ab <span class=\"token operator\">+</span> c<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">;</span>\n        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>BLACK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n__kernel <span class=\"token keyword\">void</span> <span class=\"token function\">fractal</span><span class=\"token punctuation\">(</span>\n    __global <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>out<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 이미지 버퍼로 쓰일 메모리 오브젝트</span>\n    t_complex entry_point<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 이미지 버퍼 상 가장 왼쪽 위 픽셀에 대응하는 복소수</span>\n    <span class=\"token keyword\">float</span> delta<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 픽셀 사이 간격의 복소 평면에 대한 비율</span>\n    <span class=\"token keyword\">int</span> window_width <span class=\"token comment\">// 윈도우 넓이</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> <span class=\"token function\">get_global_id</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> idx <span class=\"token operator\">%</span> window_width<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> idx <span class=\"token operator\">/</span> window_width<span class=\"token punctuation\">;</span>\n    t_complex point<span class=\"token punctuation\">;</span>\n\n    point<span class=\"token punctuation\">.</span>r <span class=\"token operator\">=</span> entry_point<span class=\"token punctuation\">.</span>r <span class=\"token operator\">+</span> delta <span class=\"token operator\">*</span> r<span class=\"token punctuation\">;</span>\n    point<span class=\"token punctuation\">.</span>i <span class=\"token operator\">=</span> entry_point<span class=\"token punctuation\">.</span>i <span class=\"token operator\">+</span> delta <span class=\"token operator\">*</span> i<span class=\"token punctuation\">;</span>\n    out<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">iteration</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">,</span> point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드는 복소수의 만델브로 집합 포함 여부를 판단할 로직을 보여주고 있습니다. 연산 유닛의 개수는 이미지 버퍼의 픽셀 개수와 같습니다. 커널 <code class=\"language-text\">fractal</code> 에서는 현재 연산 유닛의 global 계층 상 인덱스(<code class=\"language-text\">int idx = get_global_id(0);</code>) 와 호스트에서 매개 변수로 전달한 윈도우의 넓이(<code class=\"language-text\">int window_width</code>) 를 이용해 현재 연산 유닛의 복소수, 즉 이미지 버퍼에 대응하는 픽셀의 복소 평면 상 좌표를 구합니다. <code class=\"language-text\">point.r = ...</code> 과 <code class=\"language-text\">point.i = ...</code> 코드 구문이 이를 보여주고 있습니다.</p>\n<p>함수 <code class=\"language-text\">iteration</code> 은 커널 <code class=\"language-text\">fractal</code> 에서 호출하는 함수입니다. OpenCL 에서는 커널이 아닌 이와 같은 함수를 <strong>보조함수 (auxiliary function)</strong> 라 부릅니다. <code class=\"language-text\">iteration</code> 은 복소수 연산 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>z</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><msubsup><mi>z</mi><mi>n</mi><mn>2</mn></msubsup><mo>+</mo><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">z_{n + 1} = z_n^2 + c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.638891em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.061108em;vertical-align:-0.247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.04398em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> 를 <code class=\"language-text\">MAX_ITERATION</code> 번 수행하고 발산하는 수열의 경계값인 2를 이용해 만델브로 집합에 속하지 않는 <code class=\"language-text\">c</code> 에 대해 흰색 RGB 값을 반환합니다. 조건문 <code class=\"language-text\">if (aa + bb &gt; 4)</code> 가 이를 보여주고 있습니다. <code class=\"language-text\">MAX_ITERATION</code> 동안 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∥</mi><msub><mi>z</mi><mi>n</mi></msub><mi mathvariant=\"normal\">∥</mi></mrow><annotation encoding=\"application/x-tex\">\\|z_n\\|</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∥</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">∥</span></span></span></span> 가 경계값보다 작을 경우 검은색 RGB 값을 반환합니다.</p>\n<p><br/><br/></p>\n<p><strong>4. 커널 실행</strong></p>\n<p>다시 호스트 파트로 돌아와 커널에 필요한 매개변수를 전달할 코드를 작성하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">t_complex entry_point <span class=\"token operator\">=</span> <span class=\"token function\">init_entry_point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> delta <span class=\"token operator\">=</span> <span class=\"token function\">init_delta</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> window_width <span class=\"token operator\">=</span> WINDOW_WIDTH<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">clSetKernelArg</span><span class=\"token punctuation\">(</span>kernel<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>dev_mem_obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dev_mem_obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">clSetKernelArg</span><span class=\"token punctuation\">(</span>kernel<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>entry_point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>entry_point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">clSetKernelArg</span><span class=\"token punctuation\">(</span>kernel<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>delta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>delta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">clSetKernelArg</span><span class=\"token punctuation\">(</span>kernel<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>window_width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>window_width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그리고 커맨드 큐에 커널과 결과 메모리를 읽을 커맨드를 추가합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">size_t global_work_size <span class=\"token operator\">=</span> WINDOW_WIDTH <span class=\"token operator\">*</span> WINDOW_HEIGHT<span class=\"token punctuation\">;</span>\nsize_t local_work_size <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">clEnqueueNDRangeKernel</span><span class=\"token punctuation\">(</span>command_queue<span class=\"token punctuation\">,</span> kernel<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>\\\n\t<span class=\"token operator\">&amp;</span>global_work_size<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>local_work_size<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">clEnqueueReadBuffer</span><span class=\"token punctuation\">(</span>command_queue<span class=\"token punctuation\">,</span> dev_mem_obj<span class=\"token punctuation\">,</span> CL_TRUE<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\\\n\t<span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>host_buf<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> global_work_size<span class=\"token punctuation\">,</span> host_buf<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>커맨드 큐에 추가된 모든 커맨드를 실행합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">clFlush</span><span class=\"token punctuation\">(</span>command_queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">clFinish</span><span class=\"token punctuation\">(</span>command_queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>병렬 연산이 완료된 메모리 오브젝트의 데이터가 이미지 버퍼 <code class=\"language-text\">host_buf</code> 에 복사되었습니다. 사용하시는 그래픽 라이브러리를 이용해 <code class=\"language-text\">host_buf</code> 를 윈도우에 출력해보시기 바랍니다. 출력 결과는 아래와 같습니다.</p>\n<center>\n<img src=\"https://www.dropbox.com/s/716a26bw0y51buz/mandelbrot_result.png?raw=1\" width=\"80%\"/>\n</center>\n<p><br/><br/></p>\n<p><strong>5. 각각의 구조체 해제</strong></p>\n<p>마지막으로 각각의 구조체의 메모리를 해제합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">clReleaseKernel</span><span class=\"token punctuation\">(</span>kernel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">clReleaseProgram</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">clReleaseMemObject</span><span class=\"token punctuation\">(</span>dev_mem_obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">clReleaseCommandQueue</span><span class=\"token punctuation\">(</span>command_queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">clReleaseContext</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><br/><br/>\n아래는 지금까지의 과정을 정리한 코드입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">t_complex <span class=\"token function\">init_entry_point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tt_complex\tpoint<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span>\t\tcoord_height<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span>\t\twindow_width <span class=\"token operator\">=</span> WINDOW_WIDTH<span class=\"token punctuation\">;</span>\n\n\tpoint<span class=\"token punctuation\">.</span>r <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1.0f</span> <span class=\"token operator\">*</span> COORD_WIDTH <span class=\"token operator\">/</span> <span class=\"token number\">2.0f</span><span class=\"token punctuation\">;</span>\n\tcoord_height <span class=\"token operator\">=</span> COORD_WIDTH <span class=\"token operator\">*</span> WINDOW_HEIGHT <span class=\"token operator\">/</span> window_width<span class=\"token punctuation\">;</span>\n\tpoint<span class=\"token punctuation\">.</span>i <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1.0f</span> <span class=\"token operator\">*</span> coord_height <span class=\"token operator\">/</span> <span class=\"token number\">2.0f</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">float</span> <span class=\"token function\">init_delta</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>COORD_WIDTH <span class=\"token operator\">/</span> WINDOW_WIDTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">example_fractal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>host_buf<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>source_str<span class=\"token punctuation\">;</span>\n\tcl_int ret<span class=\"token punctuation\">;</span>\n\tcl_platform_id platform<span class=\"token punctuation\">;</span>\n\tcl_device_id device<span class=\"token punctuation\">;</span>\n\tcl_context context<span class=\"token punctuation\">;</span>\n\tcl_command_queue command_queue<span class=\"token punctuation\">;</span>\n\tcl_program program<span class=\"token punctuation\">;</span>\n\tcl_kernel kernel<span class=\"token punctuation\">;</span>\n\tcl_mem dev_mem_obj<span class=\"token punctuation\">;</span>\n\tsize_t global_work_size <span class=\"token operator\">=</span> WINDOW_WIDTH <span class=\"token operator\">*</span> WINDOW_HEIGHT<span class=\"token punctuation\">;</span>\n\tsize_t local_work_size <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\tt_complex entry_point<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> delta<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> window_width <span class=\"token operator\">=</span> WINDOW_WIDTH<span class=\"token punctuation\">;</span>\n\n\thost_buf <span class=\"token operator\">=</span> <span class=\"token comment\">/* 동적 할당 또는 그래픽 라이브러리에서 제공하는 버퍼 할당 */</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/*\n\t** example\n\t** host_buf = (int *)malloc(sizeof(int) * global_work_size);\n\t*/</span>\n\n\tentry_point <span class=\"token operator\">=</span> <span class=\"token function\">init_entry_point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tdelta <span class=\"token operator\">=</span> <span class=\"token function\">init_delta</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/* 병렬 연산을 수행할 디바이스 ID 쿼리 */</span>\n\t<span class=\"token function\">clGetPlatformIDs</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>platform<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">clGetDeviceIDs</span><span class=\"token punctuation\">(</span>platform<span class=\"token punctuation\">,</span> CL_DEVICE_TYPE_GPU<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>device<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/* context 와 커맨드 큐 구조체 생성 */</span>\n\tcontext <span class=\"token operator\">=</span> <span class=\"token function\">clCreateContext</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>device<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcommand_queue <span class=\"token operator\">=</span> <span class=\"token function\">clCreateCommandQueue</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> device<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/*\n\t** 아래는 .cl 파일의 소스를 문자열로 복사하는 코드입니다.\n\t** get_file_content 와 같은 기능을 하는 함수는 어렵지 않게 만드실 수 있습니다.\n\t*/</span>\n\tfd <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kernels/fractal.cl\"</span><span class=\"token punctuation\">,</span> O_RDONLY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsource_str <span class=\"token operator\">=</span> <span class=\"token function\">get_file_content</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/* 프로그램 구조체 생성 */</span>\n\tprogram <span class=\"token operator\">=</span> <span class=\"token function\">clCreateProgramWithSource</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>source_str<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">clBuildProgram</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>device<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/* 커널 구조체 생성 */</span>\n\tkernel <span class=\"token operator\">=</span> <span class=\"token function\">clCreateKernel</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span> <span class=\"token string\">\"fractal\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/* 메모리 오브젝트 생성 */</span>\n\tdev_mem_obj <span class=\"token operator\">=</span> <span class=\"token function\">clCreateBuffer</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> CL_MEM_WRITE_ONLY<span class=\"token punctuation\">,</span>\\\n\t\t<span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>host_buf<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> global_work_size<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/* 커널 매개변수 설정 */</span>\n\t<span class=\"token function\">clSetKernelArg</span><span class=\"token punctuation\">(</span>kernel<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>dev_mem_obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dev_mem_obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">clSetKernelArg</span><span class=\"token punctuation\">(</span>kernel<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>entry_point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>entry_point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">clSetKernelArg</span><span class=\"token punctuation\">(</span>kernel<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>delta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>delta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">clSetKernelArg</span><span class=\"token punctuation\">(</span>kernel<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>window_width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>window_width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/* 커맨드 큐에 커널과 메모리 읽는 커맨드 추가 */</span>\n\t<span class=\"token function\">clEnqueueNDRangeKernel</span><span class=\"token punctuation\">(</span>command_queue<span class=\"token punctuation\">,</span> kernel<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>\\\n\t\t<span class=\"token operator\">&amp;</span>global_work_size<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>local_work_size<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">clEnqueueReadBuffer</span><span class=\"token punctuation\">(</span>command_queue<span class=\"token punctuation\">,</span> dev_mem_obj<span class=\"token punctuation\">,</span> CL_TRUE<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\\\n\t\t<span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>host_buf<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> global_work_size<span class=\"token punctuation\">,</span> host_buf<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/* 커맨드 큐에 추가된 커맨드 실행 */</span>\n\t<span class=\"token function\">clFlush</span><span class=\"token punctuation\">(</span>command_queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">clFinish</span><span class=\"token punctuation\">(</span>command_queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/* 윈도우에 host_buf 출력 */</span>\n\n\t<span class=\"token comment\">/* 필요한 구조체 메모리 해제 */</span>\n\t<span class=\"token function\">clReleaseKernel</span><span class=\"token punctuation\">(</span>kernel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">clReleaseProgram</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">clReleaseMemObject</span><span class=\"token punctuation\">(</span>dev_mem_obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">clReleaseCommandQueue</span><span class=\"token punctuation\">(</span>command_queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">clReleaseContext</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><br/><br/></p>\n<p><strong>kernels/fractal.cl</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">MAX_ITERATION <span class=\"token number\">100</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">WHITE <span class=\"token number\">0xFFFFFF</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">BLACK <span class=\"token number\">0x000000</span></span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span>      <span class=\"token class-name\">s_complex</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">float</span> r<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>                   t_complex<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">iteration</span><span class=\"token punctuation\">(</span>t_complex z<span class=\"token punctuation\">,</span> t_complex c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> aa<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> bb<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> two_ab<span class=\"token punctuation\">;</span>\n\n    i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> MAX_ITERATION<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        aa <span class=\"token operator\">=</span> z<span class=\"token punctuation\">.</span>r <span class=\"token operator\">*</span> z<span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">;</span>\n        bb <span class=\"token operator\">=</span> z<span class=\"token punctuation\">.</span>i <span class=\"token operator\">*</span> z<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">;</span>\n        two_ab <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> z<span class=\"token punctuation\">.</span>r <span class=\"token operator\">*</span> z<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>aa <span class=\"token operator\">+</span> bb <span class=\"token operator\">></span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>WHITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        z<span class=\"token punctuation\">.</span>r <span class=\"token operator\">=</span> aa <span class=\"token operator\">-</span> bb <span class=\"token operator\">+</span> c<span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">;</span>\n        z<span class=\"token punctuation\">.</span>i <span class=\"token operator\">=</span> two_ab <span class=\"token operator\">+</span> c<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">;</span>\n        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>BLACK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n__kernel <span class=\"token keyword\">void</span> <span class=\"token function\">fractal</span><span class=\"token punctuation\">(</span>\n    __global <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>out<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 이미지 버퍼로 쓰일 메모리 오브젝트</span>\n    t_complex entry_point<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 이미지 버퍼 상 가장 왼쪽 위 픽셀에 대응하는 복소수</span>\n    <span class=\"token keyword\">float</span> delta<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 각 픽셀 간의 복소 평면에 대응하는 간격</span>\n    <span class=\"token keyword\">int</span> window_width <span class=\"token comment\">// 윈도우 넓이</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> <span class=\"token function\">get_global_id</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> idx <span class=\"token operator\">%</span> window_width<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> idx <span class=\"token operator\">/</span> window_width<span class=\"token punctuation\">;</span>\n    t_complex point<span class=\"token punctuation\">;</span>\n\n    point<span class=\"token punctuation\">.</span>r <span class=\"token operator\">=</span> entry_point<span class=\"token punctuation\">.</span>r <span class=\"token operator\">+</span> delta <span class=\"token operator\">*</span> r<span class=\"token punctuation\">;</span>\n    point<span class=\"token punctuation\">.</span>i <span class=\"token operator\">=</span> entry_point<span class=\"token punctuation\">.</span>i <span class=\"token operator\">+</span> delta <span class=\"token operator\">*</span> i<span class=\"token punctuation\">;</span>\n    out<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">iteration</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">,</span> point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><br/><br/><br/><br/></p>\n<h3>참고</h3>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Fractal\">en.wikipedia.org</a></li>\n<li><a href=\"https://ko.wikipedia.org/wiki/%EB%A7%9D%EB%8D%B8%EB%B8%8C%EB%A1%9C_%EC%A7%91%ED%95%A9\">ko.wikipedia.org</a></li>\n</ul>","frontmatter":{"date":"2019년 08월 03일","slug":"/opencl-basic-3","title":"OpenCL 기초 (3)","tags":["OpenCL"],"category":["병렬 프로그래밍"],"description":"OpenCL 을 이용한 병렬 프로그래밍"}}},"pageContext":{"slug":"/opencl-basic-3","categories":[{"category":"선형대수학","count":26,"href":"/category/선형대수학"},{"category":"그래픽스","count":7,"href":"/category/그래픽스"},{"category":"병렬 프로그래밍","count":3,"href":"/category/병렬 프로그래밍"},{"category":"최적화 문제","count":3,"href":"/category/최적화 문제"},{"category":"알고리즘","count":2,"href":"/category/알고리즘"},{"category":"미적분","count":2,"href":"/category/미적분"}],"tags":[{"tag":"코딩 더 매트릭스","count":24,"href":"/tag/코딩 더 매트릭스"},{"tag":"python","count":24,"href":"/tag/python"},{"tag":"알고리즘","count":4,"href":"/tag/알고리즘"},{"tag":"OpenCL","count":3,"href":"/tag/OpenCL"},{"tag":"C","count":3,"href":"/tag/C"},{"tag":"회전","count":3,"href":"/tag/회전"},{"tag":"행렬","count":2,"href":"/tag/행렬"},{"tag":"그래픽스","count":2,"href":"/tag/그래픽스"},{"tag":"벡터","count":2,"href":"/tag/벡터"},{"tag":"라그랑주 승수법","count":2,"href":"/tag/라그랑주 승수법"},{"tag":"기저","count":1,"href":"/tag/기저"},{"tag":"정렬","count":1,"href":"/tag/정렬"},{"tag":"연결 리스트","count":1,"href":"/tag/연결 리스트"},{"tag":"문자열 탐색","count":1,"href":"/tag/문자열 탐색"},{"tag":"복소수","count":1,"href":"/tag/복소수"},{"tag":"사원수","count":1,"href":"/tag/사원수"},{"tag":"쿼터니언","count":1,"href":"/tag/쿼터니언"},{"tag":"선형대수학","count":1,"href":"/tag/선형대수학"},{"tag":"Gradient 벡터","count":1,"href":"/tag/Gradient 벡터"},{"tag":"편미분","count":1,"href":"/tag/편미분"},{"tag":"전미분","count":1,"href":"/tag/전미분"},{"tag":"확률분포","count":1,"href":"/tag/확률분포"}]}}}